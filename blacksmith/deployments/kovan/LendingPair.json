{
  "address": "0x7D9567f9CC3a0a8Bd52a5A90A1b079926485cf3d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IBSVault",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "contract IPriceOracleAggregator",
          "name": "_oracle",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_feeWithdrawalAddr",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_procotolLiquidationFeeShare",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ActionPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "action",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        }
      ],
      "name": "ActionUnPaused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "tokenReceipeint",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "premium",
          "type": "uint256"
        }
      ],
      "name": "FlashLoan",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "collateralAsset",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "pauseGuardian",
          "type": "address"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accrualBlockNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalReserves",
          "type": "uint256"
        }
      ],
      "name": "InterestAccrued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "InterestShortCircuit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "liquidatedCollateralAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        }
      ],
      "name": "Liquidate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountofWrappedBurned",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "pair",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "beneficiary",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "repayer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Repay",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "ReserveWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawCollateral",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "accountInterestIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "asset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToBorrow",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_debtOwner",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "borrowBalancePrior",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_collateralValueInUSD",
          "type": "uint256"
        }
      ],
      "name": "calcBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "calcCollateralRequired",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateLiquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralAsset",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collateralFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "collateralOfAccount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "debtToken",
      "outputs": [
        {
          "internalType": "contract IDebtToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenReceipeint",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositBorrowAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_tokenRecipient",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "feeWithdrawalAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getBorrowLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getBorrowLimitInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCashPrior",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getMaxWithdrawAllowed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOfBorrowAsset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceOfCollateral",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "getPriceOfToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getTotalAvailableCollateralValue",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_account",
          "type": "address"
        }
      ],
      "name": "getTotalAvailableCollateralValueInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "_collateralAsset",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "initialExchangeRateMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reserveFactorMantissa",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "collateralFactor",
              "type": "uint256"
            },
            {
              "internalType": "contract IBSWrapperToken",
              "name": "wrappedBorrowAsset",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "liquidationFee",
              "type": "uint256"
            },
            {
              "internalType": "contract IDebtToken",
              "name": "debtToken",
              "type": "address"
            }
          ],
          "internalType": "struct DataTypes.BorrowAssetConfig",
          "name": "borrowConfig",
          "type": "tuple"
        },
        {
          "internalType": "contract IBSWrapperToken",
          "name": "_wrappedCollateralAsset",
          "type": "address"
        },
        {
          "internalType": "contract IInterestRateModel",
          "name": "_interestRate",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_pauseGuardian",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRate",
      "outputs": [
        {
          "internalType": "contract IInterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_borrower",
          "type": "address"
        }
      ],
      "name": "liquidate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidationFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "oracle",
      "outputs": [
        {
          "internalType": "contract IPriceOracleAggregator",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LendingPair.Actions",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pauseGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LendingPair.Actions",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "pauseStatus",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolLiquidationFeeShare",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_repayAmount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_beneficiary",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum LendingPair.Actions",
          "name": "action",
          "type": "uint8"
        }
      ],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vault",
      "outputs": [
        {
          "internalType": "contract IBSVault",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8[]",
          "name": "actions",
          "type": "uint8[]"
        },
        {
          "internalType": "bytes[]",
          "name": "data",
          "type": "bytes[]"
        }
      ],
      "name": "warp",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollateral",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_toWithdraw",
          "type": "uint256"
        }
      ],
      "name": "withdrawFees",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrappedCollateralAsset",
      "outputs": [
        {
          "internalType": "contract IBSWrapperToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wrapperBorrowedAsset",
      "outputs": [
        {
          "internalType": "contract IBSWrapperToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6036874918529da520a5c932761ce5c8d35dc54d4a5933f676812de3d54eae3e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0xf6DF5d5Ec46CcD10AE514384C292e3ca6E31dFa8",
    "contractAddress": null,
    "transactionIndex": 5,
    "gasUsed": "4044570",
    "logsBloom": "0x
    "blockHash": "0x477d15fde7c645f40320093a7ad93e73d113bb82e3d7fe9ec2bc8a54447836b2",
    "transactionHash": "0x6036874918529da520a5c932761ce5c8d35dc54d4a5933f676812de3d54eae3e",
    "logs": [],
    "blockNumber": 26541427,
    "cumulativeGasUsed": "4336870",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xfd3EA93075DDf1c3C2D3Bc63E9599Ea8cF8768F9",
    "0x137705fFa352b58Bf2156Fff4404924EE7553Ba3",
    "0x97a5b1c6381b1EC5E582E11B3F6Edcf0A329F4b1",
    "50000000000000000"
  ],
  "solcInputHash": "93ebaa441e3462400e4372fabffe5451",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IBSVault\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"contract IPriceOracleAggregator\",\"name\":\"_oracle\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_feeWithdrawalAddr\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_procotolLiquidationFeeShare\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ActionPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"action\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"name\":\"ActionUnPaused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenReceipeint\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"premium\",\"type\":\"uint256\"}],\"name\":\"FlashLoan\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"collateralAsset\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"pauseGuardian\",\"type\":\"address\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accrualBlockNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalReserves\",\"type\":\"uint256\"}],\"name\":\"InterestAccrued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"InterestShortCircuit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidatedCollateralAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"}],\"name\":\"Liquidate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountofWrappedBurned\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"pair\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beneficiary\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"repayer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Repay\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"ReserveWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawCollateral\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"accountInterestIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"asset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToBorrow\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_debtOwner\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"borrowBalancePrior\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_collateralValueInUSD\",\"type\":\"uint256\"}],\"name\":\"calcBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_borrowAmount\",\"type\":\"uint256\"}],\"name\":\"calcCollateralRequired\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateLiquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralAsset\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collateralFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"collateralOfAccount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"debtToken\",\"outputs\":[{\"internalType\":\"contract IDebtToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenReceipeint\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositBorrowAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_tokenRecipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"feeWithdrawalAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBorrowLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getBorrowLimitInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCashPrior\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getMaxWithdrawAllowed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOfBorrowAsset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceOfCollateral\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"getPriceOfToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalAvailableCollateralValue\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_account\",\"type\":\"address\"}],\"name\":\"getTotalAvailableCollateralValueInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"_collateralAsset\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveFactorMantissa\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"collateralFactor\",\"type\":\"uint256\"},{\"internalType\":\"contract IBSWrapperToken\",\"name\":\"wrappedBorrowAsset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidationFee\",\"type\":\"uint256\"},{\"internalType\":\"contract IDebtToken\",\"name\":\"debtToken\",\"type\":\"address\"}],\"internalType\":\"struct DataTypes.BorrowAssetConfig\",\"name\":\"borrowConfig\",\"type\":\"tuple\"},{\"internalType\":\"contract IBSWrapperToken\",\"name\":\"_wrappedCollateralAsset\",\"type\":\"address\"},{\"internalType\":\"contract IInterestRateModel\",\"name\":\"_interestRate\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_pauseGuardian\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRate\",\"outputs\":[{\"internalType\":\"contract IInterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_borrower\",\"type\":\"address\"}],\"name\":\"liquidate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidationFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"oracle\",\"outputs\":[{\"internalType\":\"contract IPriceOracleAggregator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LendingPair.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LendingPair.Actions\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"pauseStatus\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolLiquidationFeeShare\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_repayAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_beneficiary\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum LendingPair.Actions\",\"name\":\"action\",\"type\":\"uint8\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vault\",\"outputs\":[{\"internalType\":\"contract IBSVault\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8[]\",\"name\":\"actions\",\"type\":\"uint8[]\"},{\"internalType\":\"bytes[]\",\"name\":\"data\",\"type\":\"bytes[]\"}],\"name\":\"warp\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawCollateral\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_toWithdraw\",\"type\":\"uint256\"}],\"name\":\"withdrawFees\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrappedCollateralAsset\",\"outputs\":[{\"internalType\":\"contract IBSWrapperToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wrapperBorrowedAsset\",\"outputs\":[{\"internalType\":\"contract IBSWrapperToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@samparsky\",\"kind\":\"dev\",\"methods\":{\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block up to the current block and writes new checkpoint to storage.\"},\"borrow(uint256,address)\":{\"details\":\"we use normalized amounts to calculate the\",\"params\":{\"_amountToBorrow\":\"is the amount of the borrow asset vault shares the user wants to borrow\",\"_debtOwner\":\"this should be the msg.sender or address that delegates credit to the msg.sender\"}},\"borrowBalanceCurrent(address)\":{\"params\":{\"_account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"returns\":{\"_0\":\"The calculated balance*\"}},\"calcBorrowLimit(uint256)\":{\"params\":{\"_collateralValueInUSD\":\"is the USD value of the users collateral\"}},\"calcCollateralRequired(uint256)\":{\"params\":{\"_borrowAmount\":\"is the input borrow amount\"}},\"calculateLiquidationFee(uint256)\":{\"params\":{\"_amount\":\"is a uint representing the full amount earned as interest\"}},\"collateralOfAccount(address)\":{\"params\":{\"_account\":\"is the address of the account being looked up\"}},\"depositBorrowAsset(address,uint256)\":{\"details\":\"the user should initially have deposited in the vault transfer appropriate amount of underlying from msg.sender to the LendingPair\",\"params\":{\"_amount\":\"is the amount of underlying borrow asset being deposited\",\"_tokenReceipeint\":\"whom to credit the wrapped tokens\"}},\"depositCollateral(address,uint256)\":{\"params\":{\"_amount\":\"is the amount of underlying collateral asset being deposited\",\"_tokenRecipient\":\"address to credit the wrapped collateral shares\"}},\"exchangeRateCurrent()\":{\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"getBorrowLimit(address)\":{\"details\":\"this calculation uses current values for calculations\",\"params\":{\"_account\":\"is the input account address\"}},\"getBorrowLimitInUSD(address)\":{\"details\":\"this calculation uses current values for calculations\",\"params\":{\"_account\":\"is the input account address\"}},\"getMaxWithdrawAllowed(address)\":{\"details\":\"this function runs calculations to accrue interest for an up to date amount\",\"params\":{\"_account\":\"is the account being checked\"}},\"getPriceOfBorrowAsset()\":{\"details\":\"returns price of collateral in usd\"},\"getPriceOfCollateral()\":{\"details\":\"returns price of collateral in usd\"},\"getPriceOfToken(address,uint256)\":{\"params\":{\"_amount\":\"this is the amount of tokens\",\"_token\":\"this is the price of the token\"}},\"getTotalAvailableCollateralValue(address)\":{\"details\":\"this function runs calculations to accrue interest for an up to date amount\",\"params\":{\"_account\":\"is the address whos collateral is being retreived\"}},\"getTotalAvailableCollateralValueInUSD(address)\":{\"details\":\"this function runs calculations to accrue interest for an up to date amount\",\"params\":{\"_account\":\"is the address whos collateral is being retreived\"}},\"initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)\":{\"params\":{\"_asset\":\"borrow asset  \",\"_collateralAsset\":\"pair collateral\",\"_name\":\"for lending pair\",\"_pauseGuardian\":\"pause guardian address\",\"_symbol\":\"for lending pair\",\"_wrappedCollateralAsset\":\"wrapped token minted when depositing collateral asset\"}},\"pause(uint8)\":{\"details\":\"pause actions in the lending pair\"},\"redeem(address,uint256)\":{\"params\":{\"_amount\":\"of wrapper token to redeem\",\"_to\":\"Address to send the underlying tokens to\"}},\"repay(uint256,address)\":{\"params\":{\"_beneficiary\":\"address to repay loan position\",\"_repayAmount\":\"The amount of borrow asset to repay represented in underlying\"}},\"unpause(uint8)\":{\"details\":\"unpause actions in lending pair\"},\"withdrawFees(uint256)\":{\"details\":\"this function can be called by anyone\",\"params\":{\"_toWithdraw\":\"is the amount of a reservers being withdrawn\"}}},\"stateVariables\":{\"PRECISION\":{\"details\":\"liquidation fee precision\"},\"VERSION\":{\"details\":\"version\"},\"_borrowAssetUnderlyingDecimal\":{\"details\":\"borrow asset underlying decimal\"},\"_collateralAssetUnderlyingDecimal\":{\"details\":\"collateral asset underlying decimal\"},\"accrualBlockNumber\":{\"details\":\"Block number that interest was last accrued at\"},\"borrowIndex\":{\"details\":\"Accumulator of the total earned interest rate since the opening of the market\"},\"collateralFactor\":{\"details\":\"The amount of collateral required for a borrow position in 1e18\"},\"initialExchangeRateMantissa\":{\"details\":\"initialExchangeRateMantissa Initial exchange rate used when minting\"},\"name\":{\"details\":\"lending pair name\"},\"reserveFactorMantissa\":{\"details\":\"Fraction of interest currently set aside for reserves\"},\"symbol\":{\"details\":\"lending pair symbol\"}},\"title\":\"LendingPair\",\"version\":1},\"userdoc\":{\"events\":{\"Deposit(address,address,address,address,uint256)\":{\"notice\":\"Emitted on deposit\"},\"Liquidate(address,address,address,uint256,address)\":{\"notice\":\"Emitted on liquidation\"},\"Redeem(address,address,address,address,uint256,uint256)\":{\"notice\":\"Emitted on Redeem\"},\"Repay(address,address,address,address,uint256)\":{\"notice\":\"Emitted on repay\"}},\"kind\":\"user\",\"methods\":{\"accountInterestIndex(address)\":{\"notice\":\"Mapping of account addresses to their interest interest index\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"asset()\":{\"notice\":\"The pair borrow asset\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance  using the updated borrowIndex\"},\"calcBorrowLimit(uint256)\":{\"notice\":\"calcBorrowLimit is used to calculate the borrow limit for an account  based on the input value of their collateral\"},\"calcCollateralRequired(uint256)\":{\"notice\":\"calcCollateralRequired returns the amount of collateral needed for an input borrow value\"},\"calculateLiquidationFee(uint256)\":{\"notice\":\"calculateFee is used to calculate the fee earned\"},\"collateralAsset()\":{\"notice\":\"The pair collateral asset\"},\"collateralOfAccount(address)\":{\"notice\":\"collateralOfAccount is a view function to retreive an accounts collateral\"},\"debtToken()\":{\"notice\":\"The wrapper token for debt\"},\"depositCollateral(address,uint256)\":{\"notice\":\"deposit allows a user to deposit underlying collateral from vault\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"feeWithdrawalAddr()\":{\"notice\":\"The address to withdraw fees to\"},\"getBorrowLimit(address)\":{\"notice\":\"getBorrowLimit returns the borrow limit for an account\"},\"getBorrowLimitInUSD(address)\":{\"notice\":\"getBorrowLimit returns the borrow limit for an account\"},\"getCashPrior()\":{\"notice\":\"getCashPrior is a view funcion that returns the balance of all held borrow asset\"},\"getMaxWithdrawAllowed(address)\":{\"notice\":\"Figures out how much of a given collateral an account is allowed to withdraw\"},\"getPriceOfToken(address,uint256)\":{\"notice\":\"getPriceOfToken returns price of token in usd\"},\"getTotalAvailableCollateralValue(address)\":{\"notice\":\"getTotalAvailableCollateralValue returns the total availible collaeral value for an account\"},\"getTotalAvailableCollateralValueInUSD(address)\":{\"notice\":\"getTotalAvailableCollateralValueInUSD returns the total availible collaeral value for an account in USD\"},\"initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)\":{\"notice\":\"Initialize function\"},\"interestRate()\":{\"notice\":\"The interest rate model for the borrow asset\"},\"liquidationFee()\":{\"notice\":\"liquidation fee in 1e18\"},\"oracle()\":{\"notice\":\"The price oracle for the assets\"},\"pauseGuardian()\":{\"notice\":\"the address that can pause borrow & deposits of assets\"},\"pauseStatus(uint8)\":{\"notice\":\"Mapping of action to pause status\"},\"protocolLiquidationFeeShare()\":{\"notice\":\"protocol liquidation fee percent in 1e18\"},\"redeem(address,uint256)\":{\"notice\":\"Allows a user to redeem their Wrapper Token for the appropriate amount of underlying asset\"},\"repay(uint256,address)\":{\"notice\":\"Sender repays their own borrow\"},\"totalBorrows()\":{\"notice\":\"Total amount of outstanding borrows of the asset in this market\"},\"totalReserves()\":{\"notice\":\"Total amount of reserves of the underlying held in this market\"},\"vault()\":{\"notice\":\"where the tokens are stored\"},\"withdrawFees(uint256)\":{\"notice\":\"withdrawFees to the feeWithdrawalAddr\"},\"wrappedCollateralAsset()\":{\"notice\":\"The wrapper token for the collateral asset\"},\"wrapperBorrowedAsset()\":{\"notice\":\"The wrapper token for the borrow asset\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LendingPair.sol\":\"LendingPair\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(IERC20 token, address spender, uint256 value) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        // solhint-disable-next-line max-line-length\\n        require((value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) { // Return data is optional\\n            // solhint-disable-next-line max-line-length\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x99f5c21018d796db7833a2100bb0e7411999e248a3c950fb526eee5d2bf47cb7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title DataTypes\\n/// @author @samparsky\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\nlibrary DataTypes {\\n    struct BorrowAssetConfig {\\n        uint256 initialExchangeRateMantissa;\\n        uint256 reserveFactorMantissa;\\n        uint256 collateralFactor;\\n        IBSWrapperToken wrappedBorrowAsset;\\n        uint256 liquidationFee;\\n        IDebtToken debtToken;\\n    }\\n\\n    function validBorrowAssetConfig(BorrowAssetConfig memory self, address _owner) internal view {\\n        require(self.initialExchangeRateMantissa > 0, \\\"E\\\");\\n        require(self.reserveFactorMantissa > 0, \\\"F\\\");\\n        require(self.collateralFactor > 0, \\\"C\\\");\\n        require(self.liquidationFee > 0, \\\"L\\\");\\n        require(address(self.wrappedBorrowAsset) != address(0), \\\"B\\\");\\n        require(address(self.debtToken) != address(0), \\\"IB\\\");\\n        require(self.wrappedBorrowAsset.owner() == _owner, \\\"IW\\\");\\n        require(self.debtToken.owner() == _owner, \\\"IVW\\\");\\n    }\\n}\\n\",\"keccak256\":\"0xd1864e62a3b1c4ccdd74371dd42742ddbdad9495e534824b6b876a9b7a63cf56\",\"license\":\"MIT\"},\"contracts/LendingPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./math/Exponential.sol\\\";\\nimport \\\"./interfaces/IInterestRateModel.sol\\\";\\nimport \\\"./interfaces/IBSVault.sol\\\";\\nimport \\\"./interfaces/IBSLendingPair.sol\\\";\\nimport \\\"./interfaces/IBSWrapperToken.sol\\\";\\nimport \\\"./interfaces/IDebtToken.sol\\\";\\nimport \\\"./interfaces/IPriceOracleAggregator.sol\\\";\\nimport \\\"./DataTypes.sol\\\";\\nimport \\\"./util/Initializable.sol\\\";\\nimport \\\"./token/IERC20Details.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n///\\n/// @title LendingPair\\n/// @author @samparsky\\n/// @notice\\n///\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract LendingPair is IBSLendingPair, Exponential, Initializable {\\n    using SafeERC20 for IERC20;\\n    using DataTypes for DataTypes.BorrowAssetConfig;\\n\\n    enum Actions {Deposit, Borrow}\\n\\n    /// @dev lending pair name\\n    string public name;\\n\\n    /// @dev lending pair symbol\\n    string public symbol;\\n\\n    /// @dev version\\n    uint256 public constant VERSION = 0x1;\\n\\n    /// @notice where the tokens are stored\\n    IBSVault public immutable vault;\\n\\n    /// @notice protocol liquidation fee percent in 1e18\\n    uint256 public immutable protocolLiquidationFeeShare;\\n\\n    /// @notice The interest rate model for the borrow asset\\n    IInterestRateModel public interestRate;\\n\\n    /// @notice The price oracle for the assets\\n    IPriceOracleAggregator public immutable override oracle;\\n\\n    /// @notice The address to withdraw fees to\\n    address public immutable feeWithdrawalAddr;\\n\\n    /// @dev borrow asset underlying decimal\\n    uint8 private _borrowAssetUnderlyingDecimal;\\n\\n    /// @dev collateral asset underlying decimal\\n    uint8 private _collateralAssetUnderlyingDecimal;\\n\\n    /// @dev initialExchangeRateMantissa Initial exchange rate used when minting\\n    uint256 internal initialExchangeRateMantissa;\\n\\n    /// @dev Fraction of interest currently set aside for reserves\\n    uint256 private reserveFactorMantissa;\\n\\n    /// @dev Block number that interest was last accrued at\\n    uint256 private accrualBlockNumber;\\n\\n    /// @dev Accumulator of the total earned interest rate since the opening of the market\\n    uint256 public override borrowIndex;\\n\\n    /// @notice Total amount of reserves of the underlying held in this market\\n    uint256 public override totalReserves;\\n\\n    /// @dev The amount of collateral required for a borrow position in 1e18\\n    uint256 public collateralFactor;\\n\\n    /// @notice liquidation fee in 1e18\\n    uint256 public liquidationFee;\\n\\n    /// @dev liquidation fee precision\\n    uint256 private constant PRECISION = 1e18;\\n\\n    /// @notice the address that can pause borrow & deposits of assets\\n    address public pauseGuardian;\\n\\n    /// @notice The pair borrow asset\\n    IERC20 public override asset;\\n\\n    /// @notice The pair collateral asset\\n    IERC20 public override collateralAsset;\\n\\n    /// @notice The wrapper token for the borrow asset\\n    IBSWrapperToken public override wrapperBorrowedAsset;\\n\\n    /// @notice The wrapper token for the collateral asset\\n    IBSWrapperToken public override wrappedCollateralAsset;\\n\\n    /// @notice The wrapper token for debt\\n    IDebtToken public override debtToken;\\n\\n    /// @notice Mapping of account addresses to their interest interest index\\n    mapping(address => uint256) public override accountInterestIndex;\\n\\n    /// @notice Mapping of action to pause status\\n    mapping(Actions => bool) public pauseStatus;\\n\\n    modifier whenNotPaused(Actions action) {\\n        require(pauseStatus[action] == false, \\\"PAUSED\\\");\\n        _;\\n    }\\n\\n    modifier onlyPauseGuardian() {\\n        require(msg.sender == pauseGuardian, \\\"O_G\\\");\\n        _;\\n    }\\n\\n    constructor(\\n        IBSVault _vault,\\n        IPriceOracleAggregator _oracle,\\n        address _feeWithdrawalAddr,\\n        uint256 _procotolLiquidationFeeShare\\n    ) {\\n        // invalid vault or oracle\\n        require(address(_vault) != address(0), \\\"IV0\\\");\\n        // invalid vault or oracle\\n        require(address(_oracle) != address(0), \\\"IV0\\\");\\n        // invalid fee withdrawal addr\\n        require(_feeWithdrawalAddr != address(0), \\\"IVWA\\\");\\n\\n        vault = _vault;\\n        oracle = _oracle;\\n        feeWithdrawalAddr = _feeWithdrawalAddr;\\n        protocolLiquidationFeeShare = _procotolLiquidationFeeShare;\\n    }\\n\\n    /// @notice Initialize function\\n    /// @param _name for lending pair\\n    /// @param _symbol for lending pair\\n    /// @param _asset borrow asset  \\n    /// @param _collateralAsset pair collateral\\n    /// @param _wrappedCollateralAsset wrapped token minted when depositing collateral asset\\n    /// @param _pauseGuardian pause guardian address\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20 _asset,\\n        IERC20 _collateralAsset,\\n        DataTypes.BorrowAssetConfig calldata borrowConfig,\\n        IBSWrapperToken _wrappedCollateralAsset,\\n        IInterestRateModel _interestRate,\\n        address _pauseGuardian\\n    ) external override initializer {\\n        // invalid asset or collateral asset\\n        require(address(_asset) != address(0) && address(_collateralAsset) != address(0), \\\"IAC\\\");\\n        // invalid pause guardian\\n        require(_pauseGuardian != address(0), \\\"IVP\\\");\\n        // validate wrapped collateral asset owner\\n        require(_wrappedCollateralAsset.owner() == address(this), \\\"IVWC\\\");\\n        // interest rate model\\n        require(address(_interestRate) != address(0), \\\"IVIR\\\");\\n        // en\\n        require(borrowConfig.liquidationFee > 0, \\\"INLF\\\");\\n        // validate borrow config\\n        borrowConfig.validBorrowAssetConfig(address(this));\\n\\n        name = _name;\\n        symbol = _symbol;\\n        pauseGuardian = _pauseGuardian;\\n        asset = _asset;\\n        collateralAsset = _collateralAsset;\\n        interestRate = _interestRate;\\n        borrowIndex = mantissaOne;\\n\\n        initialExchangeRateMantissa = borrowConfig.initialExchangeRateMantissa;\\n        reserveFactorMantissa = borrowConfig.reserveFactorMantissa;\\n        collateralFactor = borrowConfig.collateralFactor;\\n        liquidationFee = borrowConfig.liquidationFee;\\n        wrapperBorrowedAsset = borrowConfig.wrappedBorrowAsset;\\n        debtToken = borrowConfig.debtToken;\\n\\n        wrappedCollateralAsset = _wrappedCollateralAsset;\\n\\n        _borrowAssetUnderlyingDecimal = IERC20Details(address(asset)).decimals();\\n        _collateralAssetUnderlyingDecimal = IERC20Details(address(collateralAsset)).decimals();\\n\\n        emit Initialized(address(this), address(_asset), address(_collateralAsset), _pauseGuardian);\\n    }\\n\\n    /// @dev pause actions in the lending pair\\n    function pause(Actions action) external onlyPauseGuardian {\\n        pauseStatus[action] = true;\\n        emit ActionPaused(uint8(action), block.timestamp);\\n    }\\n\\n    /// @dev unpause actions in lending pair\\n    function unpause(Actions action) external onlyPauseGuardian {\\n        pauseStatus[action] = false;\\n        emit ActionUnPaused(uint8(action), block.timestamp);\\n    }\\n\\n    /// @notice deposit allows a user to deposit underlying collateral from vault\\n    /// @param _tokenRecipient address to credit the wrapped collateral shares\\n    /// @param _amount is the amount of underlying collateral asset being deposited\\n    function depositCollateral(address _tokenRecipient, uint256 _amount)\\n        public\\n        override\\n        whenNotPaused(Actions.Deposit)\\n    {\\n        uint256 vaultShareAmount = vault.toShare(collateralAsset, _amount, false);\\n\\n        vault.transfer(collateralAsset, msg.sender, address(this), vaultShareAmount);\\n        // mint receipient vault share amount\\n        wrappedCollateralAsset.mint(_tokenRecipient, vaultShareAmount);\\n        emit Deposit(\\n            address(this),\\n            address(collateralAsset),\\n            _tokenRecipient,\\n            msg.sender,\\n            vaultShareAmount\\n        );\\n    }\\n\\n    /// @dev the user should initially have deposited in the vault\\n    /// transfer appropriate amount of underlying from msg.sender to the LendingPair\\n    /// @param _tokenReceipeint whom to credit the wrapped tokens\\n    /// @param _amount is the amount of underlying borrow asset being deposited\\n    function depositBorrowAsset(address _tokenReceipeint, uint256 _amount)\\n        public\\n        override\\n        whenNotPaused(Actions.Deposit)\\n    {\\n        require(_tokenReceipeint != address(0), \\\"IDB\\\");\\n        uint256 vaultShareAmount = vault.toShare(asset, _amount, false);\\n\\n        // retrieve exchange rate\\n        uint256 exchangeRateMantissa = exchangeRateCurrent();\\n        // We get the current exchange rate and calculate the number of wrapper token to be minted:\\n        // mintTokens = _amount / exchangeRate\\n        uint256 mintTokens =\\n            divScalarByExpTruncate(vaultShareAmount, Exp({mantissa: exchangeRateMantissa}));\\n\\n        // transfer appropriate amount of DAI from msg.sender to the Vault\\n        vault.transfer(asset, msg.sender, address(this), vaultShareAmount);\\n\\n        // mint appropriate wrapped tokens\\n        wrapperBorrowedAsset.mint(_tokenReceipeint, mintTokens);\\n\\n        emit Deposit(\\n            address(this),\\n            address(asset),\\n            _tokenReceipeint,\\n            msg.sender,\\n            vaultShareAmount\\n        );\\n    }\\n\\n    /// @param _amountToBorrow is the amount of the borrow asset vault shares the user wants to borrow\\n    /// @param _debtOwner this should be the msg.sender or address that delegates credit to the msg.sender\\n    /// @dev we use normalized amounts to calculate the\\n    function borrow(uint256 _amountToBorrow, address _debtOwner) external whenNotPaused(Actions.Borrow) {\\n        require(_debtOwner != address(0), \\\"INV_DEBT_OWNER\\\");\\n        // save on sload\\n        uint8 __borrowAssetUnderlyingDecimal = _borrowAssetUnderlyingDecimal;\\n        IERC20 __asset = asset;\\n\\n        uint256 borrowedTotalWithInterest = borrowBalanceCurrent(_debtOwner);\\n        uint256 currentBorrowAssetPrice = oracle.getPriceInUSD(__asset);\\n        uint256 borrowedTotalInUSDNormalized =\\n            normalize(borrowedTotalWithInterest, __borrowAssetUnderlyingDecimal) *\\n                currentBorrowAssetPrice;\\n        uint256 borrowLimitInUSDNormalized =\\n            normalize(getBorrowLimit(_debtOwner), _collateralAssetUnderlyingDecimal) *\\n                getPriceOfCollateral();\\n        uint256 borrowAmountAllowedInUSDNormalized =\\n            borrowLimitInUSDNormalized - borrowedTotalInUSDNormalized;\\n        // borrow amount in usd normalized\\n        uint256 borrowAmountInUSDNormalized =\\n            normalize(_amountToBorrow, __borrowAssetUnderlyingDecimal) * currentBorrowAssetPrice;\\n        // require the amount being borrowed is less than\\n        // or equal to the amount they are aloud to borrow\\n        require(\\n            borrowAmountAllowedInUSDNormalized >= borrowAmountInUSDNormalized,\\n            \\\"BORROWING_MORE_THAN_ALLOWED\\\"\\n        );\\n\\n        uint256 amountOfSharesToBorrow = vault.toShare(__asset, _amountToBorrow, false);\\n        // mint debt tokens to _debtOwner account\\n        debtToken.mint(_debtOwner, msg.sender, _amountToBorrow);\\n        // set interest index\\n        accountInterestIndex[_debtOwner] = borrowIndex;\\n        // transfer borrow asset to borrower\\n        vault.transfer(__asset, address(this), msg.sender, amountOfSharesToBorrow);\\n\\n        emit Borrow(msg.sender, _amountToBorrow);\\n    }\\n\\n    /// @notice Sender repays their own borrow\\n    /// @param _repayAmount The amount of borrow asset to repay represented in underlying\\n    /// @param _beneficiary address to repay loan position\\n    function repay(uint256 _repayAmount, address _beneficiary) public {\\n        require(_beneficiary != address(0), \\\"INV_BENEFICIARY\\\");\\n\\n        // We fetch the amount the borrower owes, with accumulated interest\\n        uint256 accountBorrows = borrowBalanceCurrent(_beneficiary);\\n\\n        // require the borrower cant pay more than they owe\\n        require(_repayAmount <= accountBorrows, \\\"MORE_THAN_OWED\\\");\\n\\n        uint256 repayAmount = 0;\\n\\n        if (_repayAmount == 0) {\\n            repayAmount = accountBorrows;\\n        } else {\\n            repayAmount = _repayAmount;\\n        }\\n\\n        // convert repayAmount to share and round up\\n        uint256 repayAmountInShares = vault.toShare(asset, repayAmount, true);\\n\\n        require(\\n            vault.balanceOf(asset, msg.sender) >= repayAmountInShares,\\n            \\\"NOT_ENOUGH_BALANCE\\\"\\n        );\\n\\n        // transfer the borrow asset from the borrower to LendingPair\\n        vault.transfer(asset, msg.sender, address(this), repayAmountInShares);\\n\\n        accountInterestIndex[_beneficiary] = borrowIndex;\\n\\n        debtToken.burn(_beneficiary, repayAmount);\\n\\n        emit Repay(\\n            address(this),\\n            address(asset),\\n            _beneficiary,\\n            msg.sender,\\n            repayAmount\\n        );\\n    }\\n\\n    struct RedeemLocalVars {\\n        uint256 exchangeRateMantissa;\\n        uint256 burnTokens;\\n        uint256 currentBSBalance;\\n        uint256 currentUnderlyingBalance;\\n        uint256 amount;\\n    }\\n\\n    /// @notice Allows a user to redeem their Wrapper Token for the appropriate amount of underlying asset\\n    /// @param _to Address to send the underlying tokens to\\n    /// @param _amount of wrapper token to redeem\\n    function redeem(address _to, uint256 _amount) public override {\\n        require(_to != address(0), \\\"INV_TO\\\");\\n\\n        RedeemLocalVars memory vars;\\n\\n        // fetch the users current wrapped balance\\n        vars.currentBSBalance = wrapperBorrowedAsset.balanceOf(msg.sender);\\n\\n        // retreive current exchange rate\\n        vars.exchangeRateMantissa = exchangeRateCurrent();\\n        // calculate the current underlying balance\\n        vars.currentUnderlyingBalance = mulScalarTruncate(\\n            Exp({mantissa: vars.exchangeRateMantissa}),\\n            vars.currentBSBalance\\n        );\\n\\n        if (_amount == 0) {\\n            vars.amount = vars.currentUnderlyingBalance;\\n        } else {\\n            vars.amount = _amount;\\n        }\\n\\n        // we get the current exchange rate and calculate the number of WarpWrapperToken to be burned:\\n        // burnTokens = _amount / exchangeRate\\n        vars.burnTokens = divScalarByExpTruncate(\\n            vars.amount,\\n            Exp({mantissa: vars.exchangeRateMantissa})\\n        );\\n\\n        // ensure the vault pair has enough borrow asset balance\\n        require(vault.balanceOf(asset, address(this)) >= vars.amount, \\\"NOT_ENOUGH_BALANCE\\\");\\n        // reverts if the user doesn't have enough balance\\n        wrapperBorrowedAsset.burn(msg.sender, vars.burnTokens);\\n        // transfer\\n        vault.transfer(asset, address(this), _to, vars.amount);\\n\\n        emit Redeem(address(this), address(asset), msg.sender, _to, vars.amount, vars.burnTokens);\\n    }\\n    \\n    uint8 private constant COLLATERAL_DEPOSIT = 1;\\n    uint8 private constant BORROW_ASSET_DEPOSIT = 2;\\n    uint8 private constant REPAY = 3;\\n    uint8 private constant REDEEM = 4;\\n    uint8 private constant WITHDRAW_COLLATERAL = 5;\\n    uint8 private constant VAULT_DEPOSIT = 6;\\n    uint8 private constant VAULT_WITHDRAW = 7;\\n    uint8 private constant VAULT_TRANSFER = 8;\\n    uint8 private constant VAULT_APPROVE_CONTRACT = 9;\\n\\n    function warp(\\n        uint8[] calldata actions,\\n        bytes[] calldata data\\n    ) external {\\n        require(actions.length == data.length, \\\"INV\\\");\\n\\n        for (uint8 i = 0; i < actions.length;  i++) {\\n            uint8 action = actions[i];\\n            if (action == BORROW_ASSET_DEPOSIT) {\\n                (address receipient, uint256 vaultAmount) = abi.decode(data[i], (address, uint256));\\n                depositBorrowAsset(receipient, vaultAmount);\\n            } else if (action == COLLATERAL_DEPOSIT) {\\n                (address receipient, uint256 amount) = abi.decode(data[i], (address, uint256));\\n                depositCollateral(receipient, amount);\\n            } else if (action == REPAY) {\\n                (uint256 amount, address beneficiary) = abi.decode(data[i], (uint256, address));\\n                repay(amount, beneficiary);\\n            } else if (action == REDEEM) {\\n                (address receipient, uint256 amount) = abi.decode(data[i], (address, uint256));\\n                redeem(receipient, amount);\\n            } else if (action == WITHDRAW_COLLATERAL) {\\n                (uint256 amount) = abi.decode(data[i], (uint256));\\n                withdrawCollateral(amount);\\n            } else if (action == VAULT_DEPOSIT) {\\n                (address token, address to, uint256 amount) = abi.decode(data[i], (address, address, uint256));\\n                vault.deposit(IERC20(token), msg.sender, to, amount);\\n            } else if (action == VAULT_WITHDRAW) {\\n                (address token, address to, uint256 amount) = abi.decode(data[i], (address, address, uint256));\\n                vault.withdraw(IERC20(token), msg.sender, to, amount);\\n            } else if (action == VAULT_TRANSFER) {\\n                (address token, address to, uint256 amount) = abi.decode(data[i], (address, address, uint256));\\n                vault.transfer(IERC20(token), msg.sender, to, amount);\\n            } else if (action == VAULT_APPROVE_CONTRACT) {\\n                (\\n                    address _user,\\n                    address _contract,\\n                    bool status,\\n                    uint8 v,\\n                    bytes32 r,\\n                    bytes32 s\\n                ) = abi.decode(data[i], (address, address, bool, uint8, bytes32, bytes32));\\n                vault.approveContract(_user, _contract, status, v, r, s);\\n            }\\n        }\\n    }\\n\\n    /// @notice calculateFee is used to calculate the fee earned\\n    /// @param _amount is a uint representing the full amount earned as interest\\n    function calculateLiquidationFee(uint256 _amount) public view returns (uint256 fee) {\\n        fee = (_amount * liquidationFee) / PRECISION;\\n    }\\n\\n    /// @notice Accrue interest then return the up-to-date exchange rate\\n    /// @return Calculated exchange rate scaled by 1e18\\n    function exchangeRateCurrent() public returns (uint256) {\\n        accrueInterest();\\n\\n        // convert amount to underlying\\n        uint256 currentTotalSupply = vault.toUnderlying(asset, wrapperBorrowedAsset.totalSupply());\\n\\n        if (currentTotalSupply == 0) {\\n            // If there are no tokens minted: exchangeRate = initialExchangeRate\\n            return initialExchangeRateMantissa;\\n        } else {\\n            // Otherwise: exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n            uint256 totalCash = getCashPrior(); // get contract asset balance\\n            uint256 cashPlusBorrowsMinusReserves;\\n            Exp memory exchangeRate;\\n\\n            // calculate total value held by contract plus owed to contract\\n            // uint totalBorrows = totalBorrows();\\n            cashPlusBorrowsMinusReserves = totalCash + totalBorrows() - totalReserves;\\n\\n            // calculate exchange rate\\n            exchangeRate = getExp(cashPlusBorrowsMinusReserves, currentTotalSupply);\\n\\n            return (exchangeRate.mantissa);\\n        }\\n    }\\n\\n    /// @notice getCashPrior is a view funcion that returns the balance of all held borrow asset\\n    function getCashPrior() public view returns (uint256) {\\n        uint256 currentBalance = vault.balanceOf(asset, address(this));\\n        if (currentBalance > 0 ) {\\n            return vault.toUnderlying(asset, currentBalance);\\n        }\\n        return currentBalance;\\n    }\\n\\n    /// @notice Total amount of outstanding borrows of the asset in this market\\n    function totalBorrows() public view returns (uint256) {\\n        return debtToken.totalSupply();\\n    }\\n\\n    /// @notice Applies accrued interest to total borrows and reserves\\n    /// @dev This calculates interest accrued from the last checkpointed block\\n    /// up to the current block and writes new checkpoint to storage.\\n    function accrueInterest() public {\\n        // remember the initial block number\\n        uint256 currentBlockNumber = getBlockNumber();\\n        uint256 accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        // short-circuit accumulating 0 interest\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            emit InterestShortCircuit(currentBlockNumber);\\n            return;\\n        }\\n\\n        // read the previous values out of storage\\n        uint256 cashPrior = getCashPrior();\\n        uint256 borrowsPrior = totalBorrows();\\n        uint256 reservesPrior = totalReserves;\\n\\n        uint256 borrowIndexPrior = borrowIndex;\\n\\n        // calculate the current borrow interest rate\\n        uint256 borrowRateMantissa =\\n            interestRate.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n\\n        // Calculate the number of blocks elapsed since the last accrual\\n        uint256 blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n\\n        // Calculate the interest accumulated into borrows and reserves and the new index:\\n        Exp memory simpleInterestFactor;\\n        uint256 interestAccumulated;\\n        uint256 totalReservesNew;\\n        uint256 borrowIndexNew;\\n\\n        // simpleInterestFactor = borrowRate * blockDelta\\n        simpleInterestFactor = mulScalar(Exp({mantissa: borrowRateMantissa}), blockDelta);\\n\\n        // interestAccumulated = simpleInterestFactor * totalBorrows\\n        interestAccumulated = mulScalarTruncate(simpleInterestFactor, borrowsPrior);\\n\\n        // totalReservesNew = interestAccumulated * reserveFactor + totalReserves\\n        totalReservesNew = mulScalarTruncateAddUInt(\\n            Exp({mantissa: reserveFactorMantissa}),\\n            interestAccumulated,\\n            reservesPrior\\n        );\\n\\n        // borrowIndexNew = simpleInterestFactor * borrowIndex + borrowIndex\\n        borrowIndexNew = mulScalarTruncateAddUInt(\\n            simpleInterestFactor,\\n            borrowIndexPrior,\\n            borrowIndexPrior\\n        );\\n\\n        // Write the previously calculated values into storage\\n        accrualBlockNumber = currentBlockNumber;\\n        borrowIndex = borrowIndexNew;\\n        // increase total borrows\\n        // totalBorrowsNew = interestAccumulated + totalBorrows\\n        debtToken.increaseTotalDebt(interestAccumulated);\\n\\n        totalReserves = totalReservesNew;\\n\\n        emit InterestAccrued(\\n            address(this),\\n            accrualBlockNumber,\\n            borrowIndex,\\n            // total borrows\\n            borrowsPrior + interestAccumulated,\\n            totalReserves\\n        );\\n    }\\n\\n    /**\\n    @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance \\n            using the updated borrowIndex\\n    @param _account The address whose balance should be calculated after updating borrowIndex\\n    @return The calculated balance\\n    **/\\n    function borrowBalanceCurrent(address _account) public returns (uint256) {\\n        accrueInterest();\\n        return borrowBalancePrior(_account);\\n    }\\n\\n    function borrowBalancePrior(address _account) public view override returns (uint256 balance) {\\n        uint256 principalTimesIndex;\\n        // Get borrowBalance and borrowIndex\\n        uint256 principal = debtToken.principal(_account);\\n        // If borrowBalance = 0 then borrowIndex is likely also 0.\\n        // Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n        if (principal == 0) {\\n            return 0;\\n        }\\n\\n        uint256 borrowInterestIndex = accountInterestIndex[_account];\\n        // Calculate new borrow balance using the interest index:\\n        // recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n        principalTimesIndex = principal * borrowIndex;\\n\\n        balance = principalTimesIndex / borrowInterestIndex;\\n    }\\n\\n    /// @notice withdrawFees to the feeWithdrawalAddr\\n    /// @param _toWithdraw is the amount of a reservers being withdrawn\\n    /// @dev this function can be called by anyone\\n    function withdrawFees(uint256 _toWithdraw) external override {\\n        require(totalReserves >= _toWithdraw, \\\"NOT_ENOUGH_BALANCE\\\");\\n\\n        totalReserves = totalReserves - _toWithdraw;\\n        vault.transfer(asset, address(this), feeWithdrawalAddr, _toWithdraw);\\n\\n        emit ReserveWithdraw(feeWithdrawalAddr, _toWithdraw);\\n    }\\n\\n    ////////////////////////////////\\n    // Collateral Actions\\n    ///////////////////////////////\\n\\n    function withdrawCollateral(uint256 _amount) public {\\n        uint256 amount;\\n\\n        uint256 maxAmount = getMaxWithdrawAllowed(msg.sender);\\n\\n        if (_amount == 0) {\\n            amount = maxAmount;\\n        } else {\\n            amount = _amount;\\n        }\\n\\n        // require the availible value of the collateral locked in this contract the user has\\n        // is greater than or equal to the amount being withdrawn\\n        require(maxAmount >= amount, \\\"EXCEEDS_ALLOWED\\\");\\n        // subtract withdrawn amount from amount stored\\n        // reverts if the user doesn't have enough balance\\n        wrappedCollateralAsset.burn(msg.sender, amount);\\n        // transfer them their token\\n        vault.transfer(collateralAsset, address(this), msg.sender, amount);\\n        emit WithdrawCollateral(msg.sender, amount);\\n    }\\n\\n    /// @notice collateralOfAccount is a view function to retreive an accounts collateral\\n    /// @param _account is the address of the account being looked up\\n    function collateralOfAccount(address _account) public view override returns (uint256) {\\n        return wrappedCollateralAsset.balanceOf(_account);\\n    }\\n\\n    /// @notice Figures out how much of a given collateral an account is allowed to withdraw\\n    /// @param _account is the account being checked\\n    /// @dev this function runs calculations to accrue interest for an up to date amount\\n    function getMaxWithdrawAllowed(address _account) public override returns (uint256) {\\n        // save on sload\\n        uint8 __collateralAssetUnderlyingDecimal = _collateralAssetUnderlyingDecimal;\\n\\n        uint256 normalizedBorrowedAmountTotal =\\n            normalize(borrowBalanceCurrent(_account), _borrowAssetUnderlyingDecimal);\\n\\n        uint256 currentCollateralValueInUSD = getPriceOfCollateral();\\n\\n        uint256 borrowedTotalNormalizedAmountInUSD =\\n            getPriceOfToken(asset, normalizedBorrowedAmountTotal);\\n        uint256 collateralValueNormalizedInUSD =\\n            normalize(\\n                getTotalAvailableCollateralValue(_account),\\n                __collateralAssetUnderlyingDecimal\\n            ) * currentCollateralValueInUSD;\\n        uint256 requiredCollateralNormalizedInUSD =\\n            calcCollateralRequired(borrowedTotalNormalizedAmountInUSD);\\n\\n        if (collateralValueNormalizedInUSD < requiredCollateralNormalizedInUSD) {\\n            return 0;\\n        }\\n\\n        // remaining collateral denormalized\\n        uint256 leftoverCollateral =\\n            denormalize(\\n                collateralValueNormalizedInUSD - requiredCollateralNormalizedInUSD,\\n                __collateralAssetUnderlyingDecimal\\n            );\\n\\n        return leftoverCollateral / currentCollateralValueInUSD;\\n    }\\n\\n    /// @notice getTotalAvailableCollateralValueInUSD returns the total availible collaeral value for an account in USD\\n    /// @param _account is the address whos collateral is being retreived\\n    /// @dev this function runs calculations to accrue interest for an up to date amount\\n    function getTotalAvailableCollateralValueInUSD(address _account) public returns (uint256) {\\n        return\\n            getPriceOfToken(\\n                collateralAsset,\\n                // convert the amount of collateral to underlying amount\\n                vault.toUnderlying(collateralAsset, collateralOfAccount(_account))\\n            );\\n    }\\n\\n    /// @notice getTotalAvailableCollateralValue returns the total availible collaeral value for an account\\n    /// @param _account is the address whos collateral is being retreived\\n    /// @dev this function runs calculations to accrue interest for an up to date amount\\n    function getTotalAvailableCollateralValue(address _account) public view returns (uint256) {\\n        // convert the amount of collateral to underlying amount\\n        return vault.toUnderlying(collateralAsset, collateralOfAccount(_account));\\n    }\\n\\n    /// @dev returns price of collateral in usd\\n    function getPriceOfCollateral() public returns (uint256) {\\n        return oracle.getPriceInUSD(collateralAsset);\\n    }\\n\\n    /// @dev returns price of collateral in usd\\n    function getPriceOfBorrowAsset() external returns (uint256) {\\n        return oracle.getPriceInUSD(asset);\\n    }\\n\\n    /// @notice getPriceOfToken returns price of token in usd\\n    /// @param _token this is the price of the token\\n    /// @param _amount this is the amount of tokens\\n    function getPriceOfToken(IERC20 _token, uint256 _amount) public returns (uint256) {\\n        return oracle.getPriceInUSD(_token) * _amount;\\n    }\\n\\n    /// @notice calcBorrowLimit is used to calculate the borrow limit for an account \\n    /// based on the input value of their collateral\\n    /// @param _collateralValueInUSD is the USD value of the users collateral\\n    function calcBorrowLimit(uint256 _collateralValueInUSD) public view override returns (uint256) {\\n        return (_collateralValueInUSD * PRECISION) / collateralFactor;\\n    }\\n\\n    /// @notice calcCollateralRequired returns the amount of collateral needed for an input borrow value\\n    /// @param _borrowAmount is the input borrow amount\\n    function calcCollateralRequired(uint256 _borrowAmount) public view returns (uint256) {\\n        return (_borrowAmount * collateralFactor) / PRECISION;\\n    }\\n\\n    /// @notice getBorrowLimit returns the borrow limit for an account\\n    /// @param _account is the input account address\\n    /// @dev this calculation uses current values for calculations\\n    function getBorrowLimitInUSD(address _account) public returns (uint256) {\\n        uint256 availibleCollateralValue = getTotalAvailableCollateralValueInUSD(_account);\\n        return calcBorrowLimit(availibleCollateralValue);\\n    }\\n\\n    /// @notice getBorrowLimit returns the borrow limit for an account\\n    /// @param _account is the input account address\\n    /// @dev this calculation uses current values for calculations\\n    function getBorrowLimit(address _account) public view returns (uint256) {\\n        uint256 availibleCollateralValue = getTotalAvailableCollateralValue(_account);\\n\\n        return calcBorrowLimit(availibleCollateralValue);\\n    }\\n\\n    function liquidate(address _borrower) external {\\n        // require the liquidator is not also the borrower\\n        require(msg.sender != _borrower, \\\"NOT_LIQUIDATE_SELF\\\");\\n\\n        uint256 currentBorrowAssetPriceInUSD = oracle.getPriceInUSD(asset);\\n        uint256 priceOfCollateralInUSD = getPriceOfCollateral();\\n\\n        uint256 borrowedTotalWithInterest = borrowBalanceCurrent(_borrower);\\n        uint256 borrowedTotalInUSDNormalized = \\n            normalize(borrowedTotalWithInterest, _borrowAssetUnderlyingDecimal) *\\n                currentBorrowAssetPriceInUSD;\\n        uint256 borrowLimitInUSDNormalized =\\n            normalize(getBorrowLimit(_borrower), _collateralAssetUnderlyingDecimal) *\\n                priceOfCollateralInUSD;\\n\\n        // check if the borrow is less than the borrowed amount\\n        if (borrowLimitInUSDNormalized <= borrowedTotalInUSDNormalized) {\\n            // liquidation fee\\n            uint256 totalLiquidationFee = calculateLiquidationFee(borrowedTotalWithInterest);\\n            uint256 protocolFeeShareValue =\\n                (totalLiquidationFee * protocolLiquidationFeeShare) / PRECISION;\\n\\n            _repayLiquidatingLoan(\\n                _borrower,\\n                msg.sender,\\n                borrowedTotalWithInterest,\\n                borrowedTotalWithInterest + protocolFeeShareValue\\n            );\\n\\n            // Clear the borrowers interest rate index\\n            accountInterestIndex[_borrower] = 0;\\n            // add protocol liquidaiton fee amount to reserves\\n            totalReserves = totalReserves + protocolFeeShareValue;\\n\\n            // convert borrowedTotal to usd\\n            uint256 borrowedTotalInUSD =\\n                currentBorrowAssetPriceInUSD * (borrowedTotalWithInterest + totalLiquidationFee);\\n\\n            // @TODO ceil!?\\n            uint256 amountOfCollateralToLiquidate = borrowedTotalInUSD / priceOfCollateralInUSD;\\n            uint256 amountOfCollateralToLiquidateInVaultShares =\\n                vault.toShare(collateralAsset, amountOfCollateralToLiquidate, true);\\n            \\n            _liquidate(_borrower, msg.sender, amountOfCollateralToLiquidateInVaultShares);\\n        }\\n    }\\n\\n    /// @dev _repayLiquidatingLoan\\n    /// @param _borrower is the address of the borrower who took out the loan\\n    /// @param _liquidator is the address of the account who is liquidating the loan\\n    /// @param _borrowedAmount is the amount of StableCoin being repayed + fee\\n    /// @dev\\n    function _repayLiquidatingLoan(\\n        address _borrower,\\n        address _liquidator,\\n        uint256 _borrowedAmount,\\n        uint256 _borrowedAmountPlusFee\\n    ) internal {\\n        // borrowed amount + liquidation fee\\n        uint256 amountInShares = vault.toShare(asset, _borrowedAmountPlusFee, true);\\n        // repay the liquidated position\\n        vault.transfer(asset, _liquidator, address(this), amountInShares);\\n        // burn borrower debt\\n        debtToken.burn(_borrower, _borrowedAmount);\\n    }\\n\\n    /// @dev _liquidate is a function to liquidate a user\\n    /// @param _account is the address of the account being liquidated\\n    /// @param _liquidator is the address of the account doing the liquidating who receives the collateral\\n    function _liquidate(\\n        address _account,\\n        address _liquidator,\\n        uint256 amountOfCollateralToLiquidateInVaultShares\\n    ) internal {\\n        uint accountCollateralBalance = wrappedCollateralAsset.balanceOf(_account);\\n        // incase the value of the collateral drops\\n        // faster than liquidate\\n        if (amountOfCollateralToLiquidateInVaultShares > accountCollateralBalance) {\\n            amountOfCollateralToLiquidateInVaultShares = accountCollateralBalance;\\n        }\\n        \\n        // reset the borrowers collateral tracker\\n        wrappedCollateralAsset.burn(_account, amountOfCollateralToLiquidateInVaultShares);\\n\\n        // transfer the collateral tokens to the liquidator\\n        vault.transfer(\\n            collateralAsset,\\n            address(this),\\n            _liquidator,\\n            amountOfCollateralToLiquidateInVaultShares\\n        );\\n\\n        emit Liquidate(\\n            address(this),\\n            address(collateralAsset),\\n            address(_account),\\n            amountOfCollateralToLiquidateInVaultShares,\\n            _liquidator\\n        );\\n    }\\n\\n    /// @notice getBlockNumber allows for easy retrieval of block number\\n    /// @return block number\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /// @dev scales the input to from _underlyingDecimal to 18 decimal places\\n    function normalize(uint256 _amount, uint8 _underlyingDecimal) internal pure returns (uint256) {\\n        if (_underlyingDecimal >= 18) {\\n            return _amount / 10**(_underlyingDecimal - 18);\\n        } else {\\n            return _amount * (10**(18 - _underlyingDecimal));\\n        }\\n    }\\n\\n    /// @dev scales the input to from 18 decinal to underlying decimal places\\n    function denormalize(uint256 _amount, uint8 _underlyingDecimal)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        if (_underlyingDecimal >= 18) {\\n            return _amount * 10**(_underlyingDecimal - 18);\\n        } else {\\n            return _amount / (10**(18 - _underlyingDecimal));\\n        }\\n    }\\n}\",\"keccak256\":\"0x5eb6fa8cd72eae73a5ad48a995081152be9c5e35ba21085043ae497e516a09e6\",\"license\":\"MIT\"},\"contracts/interfaces/IBSLendingPair.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IPriceOracleAggregator.sol\\\";\\nimport \\\"./IBSWrapperToken.sol\\\";\\nimport \\\"./IDebtToken.sol\\\";\\nimport \\\"./IBSVault.sol\\\";\\nimport \\\"../DataTypes.sol\\\";\\n\\ninterface IBSLendingPair {\\n    event Initialized(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed collateralAsset,\\n        address pauseGuardian\\n    );\\n\\n    /**\\n     * Emitted on deposit\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset deposited in the pair\\n     * @param tokenReceipeint The user the receives the bsTokens\\n     * @param user The user that made the deposit\\n     * @param amount The amount deposited\\n     **/\\n    event Deposit(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed tokenReceipeint,\\n        address user,\\n        uint256 amount\\n    );\\n\\n    event Borrow(address indexed borrower, uint256 amount);\\n\\n    /**\\n     * Emitted on Redeem\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset withdraw in the pair\\n     * @param user The user that's making the withdrawal\\n     * @param to The user the receives the withdrawn tokens\\n     * @param amount The amount being withdrawn\\n     **/\\n    event Redeem(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        address to,\\n        uint256 amount,\\n        uint256 amountofWrappedBurned\\n    );\\n\\n    event WithdrawCollateral(address account, uint256 amount);\\n\\n    event ReserveWithdraw(address user, uint256 shares);\\n\\n    /**\\n     * Emitted on repay\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset repaid in the pair\\n     * @param beneficiary The user that's getting their debt reduced\\n     * @param repayer The user that's providing the funds\\n     * @param amount The amount being repaid\\n     **/\\n    event Repay(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed beneficiary,\\n        address repayer,\\n        uint256 amount\\n    );\\n\\n    /**\\n     * Emitted on liquidation\\n     *\\n     * @param pair The pair being interacted with\\n     * @param asset The asset that getting liquidated\\n     * @param user The user that's getting liquidated\\n     * @param liquidatedCollateralAmount The of collateral transferred to the liquidator\\n     * @param liquidator The liquidator\\n     **/\\n    event Liquidate(\\n        address indexed pair,\\n        address indexed asset,\\n        address indexed user,\\n        uint256 liquidatedCollateralAmount,\\n        address liquidator\\n    );\\n\\n    /**\\n     * @dev Emitted on flashLoan\\n     * @param target The address of the flash loan receiver contract\\n     * @param initiator The address initiating the flash loan\\n     * @param asset The address of the asset being flash borrowed\\n     * @param amount The amount flash borrowed\\n     * @param premium The fee flash borrowed\\n     **/\\n    event FlashLoan(\\n        address indexed target,\\n        address indexed initiator,\\n        address indexed asset,\\n        uint256 amount,\\n        uint256 premium\\n    );\\n\\n    /**\\n     * @dev Emitted on interest accrued\\n     * @param accrualBlockNumber block number\\n     * @param borrowIndex borrow index\\n     * @param totalBorrows total borrows\\n     * @param totalReserves total reserves\\n     **/\\n    event InterestAccrued(\\n        address indexed pair,\\n        uint256 accrualBlockNumber,\\n        uint256 borrowIndex,\\n        uint256 totalBorrows,\\n        uint256 totalReserves\\n    );\\n\\n    event InterestShortCircuit(uint256 blockNumber);\\n\\n    event ActionPaused(uint8 action, uint256 timestamp);\\n    event ActionUnPaused(uint8 action, uint256 timestamp);\\n\\n    function initialize(\\n        string memory _name,\\n        string memory _symbol,\\n        IERC20 _asset,\\n        IERC20 _collateralAsset,\\n        DataTypes.BorrowAssetConfig calldata borrowConfig,\\n        IBSWrapperToken _wrappedCollateralAsset,\\n        IInterestRateModel _interestRate,\\n        address _pauseGuardian\\n    ) external;\\n\\n    function asset() external view returns (IERC20);\\n\\n    function depositBorrowAsset(address _tokenReceipeint, uint256 _amount) external;\\n\\n    function depositCollateral(address _tokenReceipeint, uint256 _vaultShareAmount) external;\\n\\n    function redeem(address _to, uint256 _amount) external;\\n\\n    function collateralOfAccount(address _account) external view returns (uint256);\\n\\n    function getMaxWithdrawAllowed(address account) external returns (uint256);\\n\\n    function oracle() external view returns (IPriceOracleAggregator);\\n\\n    function collateralAsset() external view returns (IERC20);\\n\\n    function calcBorrowLimit(uint256 amount) external view returns (uint256);\\n\\n    function accountInterestIndex(address) external view returns (uint256);\\n\\n    function borrowIndex() external view returns (uint256);\\n\\n    function debtToken() external view returns (IDebtToken);\\n\\n    function borrowBalancePrior(address _account) external view returns (uint256);\\n\\n    function wrapperBorrowedAsset() external view returns (IBSWrapperToken);\\n\\n    function wrappedCollateralAsset() external view returns (IBSWrapperToken);\\n\\n    function totalReserves() external view returns (uint256);\\n\\n    function withdrawFees(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0xdad72f619915bc1af119ca59398ad1c7247c71cd503e004f55b7056e63928b41\",\"license\":\"MIT\"},\"contracts/interfaces/IBSVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IERC3156FlashLender.sol\\\";\\n\\ninterface IBSVault is IERC3156FlashLender {\\n    // ************** //\\n    // *** EVENTS *** //\\n    // ************** //\\n\\n    /// @notice Emitted on deposit\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being deposited\\n    /// @param amount being deposited\\n    /// @param shares the represent the amount deposited in the vault\\n    event Deposit(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 amount,\\n        uint256 shares\\n    );\\n\\n    /// @notice Emitted on withdraw\\n    /// @param token being deposited\\n    /// @param from address making the depsoit\\n    /// @param to address to credit the tokens being withdrawn\\n    /// @param amount Amount of underlying being withdrawn\\n    /// @param shares the represent the amount withdraw from the vault\\n    event Withdraw(\\n        IERC20 indexed token,\\n        address indexed from,\\n        address indexed to,\\n        uint256 shares,\\n        uint256 amount\\n    );\\n\\n    event Transfer(IERC20 indexed token, address indexed from, address indexed to, uint256 amount);\\n\\n    event FlashLoan(\\n        address indexed borrower,\\n        IERC20 indexed token,\\n        uint256 amount,\\n        uint256 feeAmount,\\n        address indexed receiver\\n    );\\n\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n\\n    event UpdateFlashLoanRate(uint256 newRate);\\n\\n    event Approval(address indexed user, address indexed allowed, bool status);\\n\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    // ************** //\\n    // *** FUNCTIONS *** //\\n    // ************** //\\n\\n    function initialize(uint256 _flashLoanRate, address _owner) external;\\n\\n    function approveContract(\\n        address _user,\\n        address _contract,\\n        bool _status,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    function deposit(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function withdraw(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _amount\\n    ) external returns (uint256);\\n\\n    function balanceOf(IERC20, address) external view returns (uint256);\\n\\n    function transfer(\\n        IERC20 _token,\\n        address _from,\\n        address _to,\\n        uint256 _shares\\n    ) external;\\n\\n    function toShare(\\n        IERC20 token,\\n        uint256 amount,\\n        bool ceil\\n    ) external view returns (uint256);\\n\\n    function toUnderlying(IERC20 token, uint256 share) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x39b8ed81f0e370881de72adf0a32c81f4b7d86312d8d15cbc0bc3040732bc52a\",\"license\":\"MIT\"},\"contracts/interfaces/IBSWrapperToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IRewardDistributorManager.sol\\\";\\n\\ninterface IBSWrapperTokenBase is IERC20 {\\n    function initialize(\\n        address _owner,\\n        address _underlying,\\n        string memory _tokenName,\\n        string memory _tokenSymbol,\\n        IRewardDistributorManager _manager\\n    ) external;\\n\\n    function burn(address _from, uint256 _amount) external;\\n\\n    function owner() external view returns (address);\\n}\\n\\ninterface IBSWrapperToken is IBSWrapperTokenBase {\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb517729706c5471ef0fea6e8daf03586f6cc926c9eeb716ae7d13a8de2053e70\",\"license\":\"MIT\"},\"contracts/interfaces/IDebtToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport {IBSWrapperTokenBase} from \\\"./IBSWrapperToken.sol\\\";\\n\\ninterface IDebtToken is IBSWrapperTokenBase {\\n    event DelegateBorrow(address from, address to, uint256 amount, uint256 timestamp);\\n\\n    function increaseTotalDebt(uint256 _amount) external;\\n\\n    function principal(address _account) external view returns (uint256);\\n\\n    function mint(\\n        address _to,\\n        address _owner,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0xcad520d843e96fae406142ca82ec1333a7600c3900424707c4a91283126e739a\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashBorrower.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.1;\\n\\ninterface IERC3156FlashBorrower {\\n    /**\\n     * @dev Receive a flash loan.\\n     * @param initiator The initiator of the loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param fee The additional amount of tokens to repay.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     * @return The keccak256 hash of \\\"ERC3156FlashBorrower.onFlashLoan\\\"\\n     */\\n    function onFlashLoan(\\n        address initiator,\\n        address token,\\n        uint256 amount,\\n        uint256 fee,\\n        bytes calldata data\\n    ) external returns (bytes32);\\n}\\n\",\"keccak256\":\"0xc72afde3ab27c13b3437769c92b10e48dc143565ba2bcf9e78f6713d4695d924\",\"license\":\"MIT\"},\"contracts/interfaces/IERC3156FlashLender.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.1;\\nimport \\\"./IERC3156FlashBorrower.sol\\\";\\n\\ninterface IERC3156FlashLender {\\n    /**\\n     * @dev The amount of currency available to be lent.\\n     * @param token The loan currency.\\n     * @return The amount of `token` that can be borrowed.\\n     */\\n    function maxFlashLoan(address token) external view returns (uint256);\\n\\n    /**\\n     * @dev The fee to be charged for a given loan.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @return The amount of `token` to be charged for the loan, on top of the returned principal.\\n     */\\n    function flashFee(address token, uint256 amount) external view returns (uint256);\\n\\n    /**\\n     * @dev Initiate a flash loan.\\n     * @param receiver The receiver of the tokens in the loan, and the receiver of the callback.\\n     * @param token The loan currency.\\n     * @param amount The amount of tokens lent.\\n     * @param data Arbitrary data structure, intended to contain user-defined parameters.\\n     */\\n    function flashLoan(\\n        IERC3156FlashBorrower receiver,\\n        address token,\\n        uint256 amount,\\n        bytes calldata data\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x381589754fc2917129ff2192df23588009fecb73f6df12bc9218dd731d25758d\",\"license\":\"MIT\"},\"contracts/interfaces/IInterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IInterestRateModel {\\n    /**\\n     * @notice Calculates the current borrow interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getBorrowRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves\\n    ) external view returns (uint256);\\n\\n    /**\\n     * @notice Calculates the current supply interest rate per block\\n     * @param cash The total amount of cash the market has\\n     * @param borrows The total amount of borrows the market has outstanding\\n     * @param reserves The total amount of reserves the market has\\n     * @param reserveFactorMantissa The current reserve factor the market has\\n     * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n     */\\n    function getSupplyRate(\\n        uint256 cash,\\n        uint256 borrows,\\n        uint256 reserves,\\n        uint256 reserveFactorMantissa\\n    ) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe6b72371b9b062ac92f3f18f7d6481e951714c95c2dd50a3ee13a266b72c2882\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    function getPriceInUSD() external returns (uint256);\\n\\n    function viewPriceInUSD() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfcdda6b34ad69e268e203fcb5e32035bcc2607838bc9f051a2a6730f4093acd7\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external returns (uint256);\\n\\n    function updateOracleForAsset(IERC20 _asset, IOracle _oracle) external;\\n\\n    function viewPriceInUSD(IERC20 _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3873b940be31bb8345d206af22a0b8cea9addaf46517398d9890735e2024cea\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IRewardDistributor {\\n    event Initialized(\\n        IERC20 indexed _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian,\\n        uint256 timestamp\\n    );\\n\\n    function accumulateReward(address _tokenAddr, address _user) external;\\n\\n    function endTimestamp() external returns (uint256);\\n\\n    function initialize(\\n        string calldata _name,\\n        IERC20 _rewardToken,\\n        uint256 _amountDistributePerSecond,\\n        uint256 _startTimestamp,\\n        uint256 _endTimestamp,\\n        address _guardian\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2d752f87ed5d75fe0498b53e76ad181ece87eb6287432f15a440b92a4efd18cd\",\"license\":\"MIT\"},\"contracts/interfaces/IRewardDistributorManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"./IRewardDistributor.sol\\\";\\n\\ninterface IRewardDistributorManager {\\n    /// @dev Emitted on Initialization\\n    event Initialized(address owner, uint256 timestamp);\\n\\n    event ApprovedDistributor(IRewardDistributor distributor, uint256 timestamp);\\n    event AddReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event RemoveReward(address tokenAddr, IRewardDistributor distributor, uint256 timestamp);\\n    event TransferControl(address _newTeam, uint256 timestamp);\\n    event OwnershipAccepted(address newOwner, uint256 timestamp);\\n\\n    function activateReward(address _tokenAddr) external;\\n\\n    function removeReward(address _tokenAddr, IRewardDistributor _distributor) external;\\n\\n    function accumulateRewards(address _from, address _to) external;\\n}\\n\",\"keccak256\":\"0xab04e19e0e0f936e38c3cd18bd1f8db04507c2288db488b7051643faf6feb361\",\"license\":\"MIT\"},\"contracts/math/Exponential.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\n\\ncontract Exponential {\\n    uint256 constant expScale = 1e18;\\n    // uint constant doubleScale = 1e36;\\n    // uint constant halfExpScale = expScale/2;\\n    uint256 constant mantissaOne = expScale;\\n\\n    struct Exp {\\n        uint256 mantissa;\\n    }\\n\\n    /**\\n     * @dev Creates an exponential from numerator and denominator values.\\n     *      Note: Returns an error if (`num` * 10e18) > MAX_INT,\\n     *            or if `denom` is zero.\\n     */\\n    function getExp(uint256 num, uint256 denom) internal pure returns (Exp memory) {\\n        uint256 scaledNumerator = num * expScale;\\n        uint256 rational = scaledNumerator / denom;\\n        return Exp({mantissa: rational});\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, returning a new Exp.\\n     */\\n    function mulScalar(Exp memory a, uint256 scalar) internal pure returns (Exp memory) {\\n        uint256 scaledMantissa = a.mantissa * scalar;\\n        return Exp({mantissa: scaledMantissa});\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mulScalarTruncate(Exp memory a, uint256 scalar) internal pure returns (uint256) {\\n        Exp memory product = mulScalar(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mulScalarTruncateAddUInt(\\n        Exp memory a,\\n        uint256 scalar,\\n        uint256 addend\\n    ) internal pure returns (uint256) {\\n        Exp memory product = mulScalar(a, scalar);\\n        return truncate(product) + addend;\\n    }\\n\\n    /**\\n     * @dev Divide an Exp by a scalar, returning a new Exp.\\n     */\\n    function divScalar(Exp memory a, uint256 scalar) internal pure returns (Exp memory) {\\n        uint256 descaledMantissa = a.mantissa / scalar;\\n        return Exp({mantissa: descaledMantissa});\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, returning a new Exp.\\n     */\\n    function divScalarByExp(uint256 scalar, Exp memory divisor) internal pure returns (Exp memory) {\\n        /*\\n          We are doing this as:\\n          getExp(mulUInt(expScale, scalar), divisor.mantissa)\\n\\n          How it works:\\n          Exp = a / b;\\n          Scalar = s;\\n          `s / (a / b)` = `b * s / a` and since for an Exp `a = mantissa, b = expScale`\\n        */\\n        uint256 numerator = expScale * scalar;\\n        return getExp(numerator, divisor.mantissa);\\n    }\\n\\n    /**\\n     * @dev Divide a scalar by an Exp, then truncate to return an unsigned integer.\\n     */\\n    function divScalarByExpTruncate(uint256 scalar, Exp memory divisor)\\n        internal\\n        pure\\n        returns (uint256)\\n    {\\n        Exp memory fraction = divScalarByExp(scalar, divisor);\\n        return truncate(fraction);\\n    }\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp memory exp) internal pure returns (uint256) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return exp.mantissa / expScale;\\n    }\\n}\\n\",\"keccak256\":\"0xd1351b03a6ae2b29819b8629c4a6ba4d02420f2317ef6b37a48609e6f54f6017\",\"license\":\"MIT\"},\"contracts/token/IERC20Details.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IERC20Details {\\n    function name() external view returns (string memory);\\n\\n    function symbol() external view returns (string memory);\\n\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xcfd6fd5f452a70690addc27342129a8ad648d1bfa8b4780edc3dd637da99dd08\",\"license\":\"MIT\"},\"contracts/util/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(\\n            _initializing || _isConstructor() || !_initialized,\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /// @dev Returns true if and only if the function is running in the constructor\\n    function _isConstructor() private view returns (bool) {\\n        // extcodesize checks the size of the code stored in an address, and\\n        // address returns the current address. Since the code is still not\\n        // deployed when running a constructor, any checks on its code size will\\n        // yield zero, making it an effective way to detect if a contract is\\n        // under construction or not.\\n        address self = address(this);\\n        uint256 cs;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            cs := extcodesize(self)\\n        }\\n        return cs == 0;\\n    }\\n}\\n\",\"keccak256\":\"0xa95d85c925336812eebaacae95df0d1ea8714d6e379066513af80fbc81961f5f\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b5060405162004add38038062004add8339810160408190526200003591620000e3565b6001600160a01b038416620000675760405162461bcd60e51b81526004016200005e906200015a565b60405180910390fd5b6001600160a01b038316620000905760405162461bcd60e51b81526004016200005e906200015a565b6001600160a01b038216620000b95760405162461bcd60e51b81526004016200005e906200013c565b6001600160601b0319606094851b811660805292841b831660c052921b1660e05260a05262000190565b60008060008060808587031215620000f9578384fd5b8451620001068162000177565b6020860151909450620001198162000177565b60408601519093506200012c8162000177565b6060959095015193969295505050565b6020808252600490820152634956574160e01b604082015260600190565b60208082526003908201526204956360ec1b604082015260600190565b6001600160a01b03811681146200018d57600080fd5b50565b60805160601c60a05160c05160601c60e05160601c61481c620002c1600039600081816116030152818161168201526132c7015260008181610d24015281816110c10152818161124801528181611f5001528181611f770152612293015260008181610ca70152610e400152600081816108180152818161094601528181610a9e01528181610b6d01528181610ef40152818161136c015281816114b2015281816115ce0152818161176b01528181611e94015281816120a80152818161214f015281816125840152818161262e015281816126f101528181612861015281816129d501528181612d3201528181612e3801528181612ee301528181612fd201528181613098015281816131450152818161332b015281816133f0015281816134980152613671015261481c6000f3fe608060405234801561001057600080fd5b50600436106103365760003560e01c80637c3a00fd116101b2578063bd6d894d116100f9578063ed6072f6116100a2578063f8d898981161007c578063f8d89898146105fd578063f919b4bf14610605578063fbfa77cf14610618578063ffa1ad741461062057610336565b8063ed6072f6146105cf578063edf07f15146105e2578063f1ab8f70146105f557610336565b8063dcec3124116100d3578063dcec3124146105ac578063dd5a612c146105bf578063df011c41146105c757610336565b8063bd6d894d1461057e578063cc9da5d614610586578063da4f7fb21461059957610336565b8063a5d5db0c1161015b578063aa5af0fd11610135578063aa5af0fd1461055b578063aabaecd614610563578063acb708151461056b57610336565b8063a5d5db0c14610538578063a5f688ee1461054b578063a6afed951461055357610336565b80638f840ddd1161018c5780638f840ddd1461052057806395d89b4114610528578063a36a36301461053057610336565b80637c3a00fd146104fd5780637dc0d1d01461050557806388c342ea1461050d57610336565b806347bd37181161028157806362f256e71161022a5780637746efab116102045780637746efab146104b15780637820f63b146104c45780637af70ba6146104d75780637c17d237146104ea57610336565b806362f256e71461047857806364cc85f11461048b5780636f427d821461049e57610336565b80635e318e071161025b5780635e318e071461043f5780636112fe2e1461045257806362546c401461046557610336565b806347bd37181461041c5780634b3fd14814610424578063588785401461043757610336565b80632bca5f35116102e3578063360e303a116102bd578063360e303a1461040457806338d52e0f1461040c5780633bfc7be81461041457610336565b80632bca5f35146103be5780632f865568146103de578063301c7e5d146103f157610336565b806323b9db031161031457806323b9db031461038e57806324a3d622146103a157806324d873f7146103b657610336565b806306fdde031461033b57806317bfdfbc146103595780631e9a695014610379575b600080fd5b610343610628565b604051610350919061407e565b60405180910390f35b61036c610367366004613bed565b6106b6565b60405161035091906144b6565b61038c610387366004613cd6565b6106d1565b005b61038c61039c366004613cd6565b610a0f565b6103a9610c96565b6040516103509190613f61565b61036c610ca5565b6103d16103cc366004613d6a565b610cc9565b604051610350919061400c565b61038c6103ec366004613bed565b610cde565b61038c6103ff366004613d6a565b610f9d565b6103a9611086565b6103a9611095565b61036c6110a4565b61036c61114f565b61038c610432366004613efa565b6111a8565b6103a9611572565b61038c61044d366004613eca565b611581565b61038c610460366004613eca565b6116b0565b61038c610473366004613d89565b611819565b61036c610486366004613eca565b611c93565b61036c610499366004613bed565b611cb6565b61036c6104ac366004613bed565b611cc8565b61036c6104bf366004613bed565b611d94565b61036c6104d2366004613bed565b611e66565b61036c6104e5366004613bed565b611e84565b61036c6104f8366004613bed565b611f33565b6103a9611f3f565b6103a9611f4e565b61036c61051b366004613cd6565b611f72565b61036c612026565b61034361202c565b61036c612039565b61038c610546366004613cd6565b61203f565b61036c612276565b61038c6122c9565b61036c6124ee565b6103a96124f4565b61038c610579366004613efa565b612503565b61036c612834565b61036c610594366004613bed565b6129bd565b61036c6105a7366004613eca565b612a71565b61038c6105ba366004613d01565b612a8a565b61036c613079565b61036c6131d8565b61036c6105dd366004613eca565b6131de565b61038c6105f0366004613d6a565b6131f6565b6103a96132c5565b6103a96132e9565b61036c610613366004613bed565b6132f8565b6103a9613329565b61036c61334d565b6001805461063590614738565b80601f016020809104026020016040519081016040528092919081815260200182805461066190614738565b80156106ae5780601f10610683576101008083540402835291602001916106ae565b820191906000526020600020905b81548152906001019060200180831161069157829003601f168201915b505050505081565b60006106c06122c9565b6106c982611d94565b90505b919050565b6001600160a01b0382166107005760405162461bcd60e51b81526004016106f79061432b565b60405180910390fd5b610708613a57565b600e546040516370a0823160e01b81526001600160a01b03909116906370a0823190610738903390600401613f61565b60206040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190613ee2565b6040820152610795612834565b81526040805160208101825282518152908201516107b39190613352565b6060820152816107cc57606081015160808201526107d4565b608081018290525b6107f4816080015160405180602001604052808460000151815250613372565b60208201526080810151600c54604051633de222bb60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926108539291909116903090600401614017565b60206040518083038186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190613ee2565b10156108c15760405162461bcd60e51b81526004016106f790614447565b600e546020820151604051632770a7eb60e21b81526001600160a01b0390921691639dc29fac916108f791339190600401613fd2565b600060405180830381600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b5050600c546080840151604051633c6340f360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116955063f18d03cc94506109839316913091899190600401614031565b600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b5050600c54608084015160208501516040513395506001600160a01b03909316935030927f18fd144d7dbcbaa6f00fd47a84adc7dc3cc64a326ffa2dc7691a25e3837dba0392610a02928a92613feb565b60405180910390a4505050565b600080805260126020527f7e7fa33969761a458e04f477e039a608702b4f924981d6653935a8319a08ad7b5460ff1615610a5b5760405162461bcd60e51b81526004016106f7906140ec565b6001600160a01b038316610a815760405162461bcd60e51b81526004016106f79061417e565b600c54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92610ad89216908790869060040161405b565b60206040518083038186803b158015610af057600080fd5b505afa158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b289190613ee2565b90506000610b34612834565b90506000610b5083604051806020016040528085815250613372565b600c54604051633c6340f360e21b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92610ba9921690339030908990600401614031565b600060405180830381600087803b158015610bc357600080fd5b505af1158015610bd7573d6000803e3d6000fd5b5050600e546040516340c10f1960e01b81526001600160a01b0390911692506340c10f199150610c0d9089908590600401613fd2565b600060405180830381600087803b158015610c2757600080fd5b505af1158015610c3b573d6000803e3d6000fd5b5050600c546040516001600160a01b038a81169450909116915030907fa856e8f098813135735b4d4f52d96083d1dbb35fd5603ff424661413f59c281090610c869033908990613fd2565b60405180910390a4505050505050565b600b546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60126020526000908152604090205460ff1681565b336001600160a01b0382161415610d075760405162461bcd60e51b81526004016106f7906141b6565b600c54604051630226614760e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692630226614792610d5a921690600401613f61565b602060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190613ee2565b90506000610db8612276565b90506000610dc5846106b6565b9050600083610de383600360149054906101000a900460ff1661337f565b610ded91906146df565b9050600083610e10610dfe88611f33565b600354600160a81b900460ff1661337f565b610e1a91906146df565b9050818111610f95576000610e2e84611c93565b90506000670de0b6b3a7640000610e657f0000000000000000000000000000000000000000000000000000000000000000846146df565b610e6f91906145a8565b9050610e86883387610e818582614590565b6133d3565b6001600160a01b038816600090815260116020526040812055600854610ead908290614590565b6008556000610ebc8387614590565b610ec690896146df565b90506000610ed488836145a8565b600d54604051636d289ce560e11b81529192506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92610f32929190911690869060019060040161405b565b60206040518083038186803b158015610f4a57600080fd5b505afa158015610f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f829190613ee2565b9050610f8f8b3383613566565b50505050505b505050505050565b600b546001600160a01b03163314610fc75760405162461bcd60e51b81526004016106f79061434b565b600060126000836001811115610fed57634e487b7160e01b600052602160045260246000fd5b600181111561100c57634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020805460ff19169115159190911790557fdfa820e666ed1059467a5c9faba2d85f0cb8a9bf8b871537a12766ff5f20107f81600181111561106c57634e487b7160e01b600052602160045260246000fd5b4260405161107b929190614507565b60405180910390a150565b600f546001600160a01b031681565b600c546001600160a01b031681565b600c54604051630226614760e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926302266147926110f7921690600401613f61565b602060405180830381600087803b15801561111157600080fd5b505af1158015611125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111499190613ee2565b90505b90565b601054604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561119457600080fd5b505afa158015611125573d6000803e3d6000fd5b6001600081905260126020527f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a35460ff16156111f65760405162461bcd60e51b81526004016106f7906140ec565b6001600160a01b03821661121c5760405162461bcd60e51b81526004016106f7906142f4565b600354600c54600160a01b90910460ff16906001600160a01b03166000611242856106b6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302266147846040518263ffffffff1660e01b81526004016112929190613f61565b602060405180830381600087803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190613ee2565b90506000816112f3848761337f565b6112fd91906146df565b90506000611309612276565b611315610dfe8a611f33565b61131f91906146df565b9050600061132d83836146fe565b905060008461133c8c8a61337f565b61134691906146df565b9050808210156113685760405162461bcd60e51b81526004016106f7906143bd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da5139ca898e60006040518463ffffffff1660e01b81526004016113bb9392919061405b565b60206040518083038186803b1580156113d357600080fd5b505afa1580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b9190613ee2565b9050601060009054906101000a90046001600160a01b03166001600160a01b031663c6c3bbe68c338f6040518463ffffffff1660e01b815260040161145293929190613fae565b600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b50506007546001600160a01b03808f1660009081526011602052604090819020929092559051633c6340f360e21b81527f0000000000000000000000000000000000000000000000000000000000000000909116925063f18d03cc91506114f1908b90309033908790600401614031565b600060405180830381600087803b15801561150b57600080fd5b505af115801561151f573d6000803e3d6000fd5b50505050336001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367508d60405161155c91906144b6565b60405180910390a2505050505050505050505050565b600e546001600160a01b031681565b8060085410156115a35760405162461bcd60e51b81526004016106f790614447565b806008546115b191906146fe565b600855600c54604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261162d92919091169030907f0000000000000000000000000000000000000000000000000000000000000000908790600401614031565b600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b505050507f0529afc4538720fe0b3eadc40486369ab962002d72fead1387b300c66073e7bf7f00000000000000000000000000000000000000000000000000000000000000008260405161107b929190613fd2565b6000806116bc33611cc8565b9050826116cb578091506116cf565b8291505b818110156116ef5760405162461bcd60e51b81526004016106f790614386565b600f54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906117219033908690600401613fd2565b600060405180830381600087803b15801561173b57600080fd5b505af115801561174f573d6000803e3d6000fd5b5050600d54604051633c6340f360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063f18d03cc93506117a9921690309033908890600401614031565b600060405180830381600087803b1580156117c357600080fd5b505af11580156117d7573d6000803e3d6000fd5b505050507fa8e76b822fc682be77f3b1c822ea81f6bda5aed92ba82e6873bfd889f328d1d2338360405161180c929190613fd2565b60405180910390a1505050565b600054610100900460ff16806118325750611832613728565b80611840575060005460ff16155b61185c5760405162461bcd60e51b81526004016106f790614228565b600054610100900460ff16158015611887576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038716158015906118a757506001600160a01b03861615155b6118c35760405162461bcd60e51b81526004016106f790614499565b6001600160a01b0382166118e95760405162461bcd60e51b81526004016106f79061420b565b306001600160a01b0316846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192c57600080fd5b505afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613c09565b6001600160a01b03161461198a5760405162461bcd60e51b81526004016106f79061410c565b6001600160a01b0383166119b05760405162461bcd60e51b81526004016106f7906141ed565b60008560800135116119d45760405162461bcd60e51b81526004016106f790614368565b6119ed306119e736889003880188613e60565b9061372e565b8851611a009060019060208c0190613a86565b508751611a149060029060208b0190613a86565b50600b80546001600160a01b038085166001600160a01b031992831617909255600c80548a8416908316179055600d80548984169083161790556003805492861692909116919091179055670de0b6b3a7640000600755843560045560208501356005556040850135600955608085018035600a55611a969060608701613bed565b600e80546001600160a01b0319166001600160a01b0392909216919091179055611ac660c0860160a08701613bed565b601080546001600160a01b03199081166001600160a01b0393841617909155600f8054909116868316179055600c546040805163313ce56760e01b81529051919092169163313ce567916004808301926020929190829003018186803b158015611b2f57600080fd5b505afa158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190613f45565b600360146101000a81548160ff021916908360ff160217905550600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcf57600080fd5b505afa158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c079190613f45565b600360156101000a81548160ff021916908360ff160217905550856001600160a01b0316876001600160a01b0316306001600160a01b03167f3514319b7a526ad5f1f42edf0c1df25fa0ea2ae054779987fbe636f164515e2f85604051611c6e9190613f61565b60405180910390a48015611c88576000805461ff00191690555b505050505050505050565b6000670de0b6b3a7640000600a5483611cac91906146df565b6106c991906145a8565b60116020526000908152604090205481565b600354600090600160a81b900460ff1681611cf7611ce5856106b6565b600354600160a01b900460ff1661337f565b90506000611d03612276565b600c54909150600090611d1f906001600160a01b031684611f72565b9050600082611d36611d3089611e84565b8761337f565b611d4091906146df565b90506000611d4d83612a71565b905080821015611d6657600096505050505050506106cc565b6000611d7b611d7583856146fe565b8861395a565b9050611d8785826145a8565b9998505050505050505050565b6010546040516316707ceb60e11b8152600091829182916001600160a01b031690632ce0f9d690611dc9908790600401613f61565b60206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613ee2565b905080611e2b576000925050506106cc565b6001600160a01b038416600090815260116020526040902054600754611e5190836146df565b9250611e5d81846145a8565b95945050505050565b600080611e72836129bd565b9050611e7d816131de565b9392505050565b600d546000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691635299493b9116611ec6856132f8565b6040518363ffffffff1660e01b8152600401611ee3929190613fd2565b60206040518083038186803b158015611efb57600080fd5b505afa158015611f0f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c99190613ee2565b600080611e7283611e84565b6003546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302266147856040518263ffffffff1660e01b8152600401611fc19190613f61565b602060405180830381600087803b158015611fdb57600080fd5b505af1158015611fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120139190613ee2565b61201d91906146df565b90505b92915050565b60085481565b6002805461063590614738565b600a5481565b600080805260126020527f7e7fa33969761a458e04f477e039a608702b4f924981d6653935a8319a08ad7b5460ff161561208b5760405162461bcd60e51b81526004016106f7906140ec565b600d54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca926120e29216908790869060040161405b565b60206040518083038186803b1580156120fa57600080fd5b505afa15801561210e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121329190613ee2565b600d54604051633c6340f360e21b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261218b921690339030908790600401614031565b600060405180830381600087803b1580156121a557600080fd5b505af11580156121b9573d6000803e3d6000fd5b5050600f546040516340c10f1960e01b81526001600160a01b0390911692506340c10f1991506121ef9087908590600401613fd2565b600060405180830381600087803b15801561220957600080fd5b505af115801561221d573d6000803e3d6000fd5b5050600d546040516001600160a01b038881169450909116915030907fa856e8f098813135735b4d4f52d96083d1dbb35fd5603ff424661413f59c2810906122689033908790613fd2565b60405180910390a450505050565b600d54604051630226614760e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926302266147926110f7921690600401613f61565b60006122d361397d565b6006549091508082141561231f577fe307fb74a265b8255fabc1154131917ce875f96118a807f88eda1e751722538d8260405161231091906144b6565b60405180910390a150506124ec565b6000612329613079565b9050600061233561114f565b6008546007546003546040516315f2405360e01b8152939450919290916000916001600160a01b03909116906315f2405390612379908890889088906004016144d6565b60206040518083038186803b15801561239157600080fd5b505afa1580156123a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c99190613ee2565b905060006123d787896146fe565b90506123e1613b06565b60008060006123fe60405180602001604052808881525086613981565b935061240a848a613352565b92506124276040518060200160405280600554815250848a6139af565b91506124348488896139af565b60068d9055600781905560105460405163146fac4560e01b81529192506001600160a01b03169063146fac459061246f9086906004016144b6565b600060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b50505060088390555060065460075430917eaf397b333f747e35288f4f28a97dff5288f74200f7a94532e63e7bc9c2786d916124d9878e614590565b60085460405161155c94939291906144ec565b565b60075481565b600d546001600160a01b031681565b6001600160a01b0381166125295760405162461bcd60e51b81526004016106f790614410565b6000612534826106b6565b9050808311156125565760405162461bcd60e51b81526004016106f7906142bd565b600083612564575080612567565b50825b600c54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca926125bf921690869060019060040161405b565b60206040518083038186803b1580156125d757600080fd5b505afa1580156125eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260f9190613ee2565b600c54604051633de222bb60e21b815291925082916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926126699291909116903390600401614017565b60206040518083038186803b15801561268157600080fd5b505afa158015612695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b99190613ee2565b10156126d75760405162461bcd60e51b81526004016106f790614447565b600c54604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92612730929190911690339030908790600401614031565b600060405180830381600087803b15801561274a57600080fd5b505af115801561275e573d6000803e3d6000fd5b50506007546001600160a01b0380881660009081526011602052604090819020929092556010549151632770a7eb60e21b815291169250639dc29fac91506127ac9087908690600401613fd2565b600060405180830381600087803b1580156127c657600080fd5b505af11580156127da573d6000803e3d6000fd5b5050600c546040516001600160a01b038881169450909116915030907f15e061f85ae0cc955acf34c814a39567895400d498e2e52faa1fbe370bbe46f2906128259033908890613fd2565b60405180910390a45050505050565b600061283e6122c9565b600c54600e54604080516318160ddd60e01b815290516000936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811694635299493b94928216939116916318160ddd916004808301926020929190829003018186803b1580156128b557600080fd5b505afa1580156128c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ed9190613ee2565b6040518363ffffffff1660e01b815260040161290a929190613fd2565b60206040518083038186803b15801561292257600080fd5b505afa158015612936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295a9190613ee2565b90508061296b57505060045461114c565b6000612975613079565b90506000612981613b06565b60085461298c61114f565b6129969085614590565b6129a091906146fe565b91506129ac82856139d2565b51945061114c9350505050565b5090565b600d546000906106c9906001600160a01b03908116907f000000000000000000000000000000000000000000000000000000000000000016635299493b82612a04876132f8565b6040518363ffffffff1660e01b8152600401612a21929190613fd2565b60206040518083038186803b158015612a3957600080fd5b505afa158015612a4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b9190613ee2565b6000670de0b6b3a764000060095483611cac91906146df565b828114612aa95760405162461bcd60e51b81526004016106f7906142a0565b60005b60ff811684111561307257600085858360ff16818110612adc57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612af19190613f29565b905060ff811660021415612b595760008085858560ff16818110612b2557634e487b7160e01b600052603260045260246000fd5b9050602002810190612b37919061451a565b810190612b449190613cd6565b91509150612b528282610a0f565b505061305f565b60ff811660011415612bb85760008085858560ff16818110612b8b57634e487b7160e01b600052603260045260246000fd5b9050602002810190612b9d919061451a565b810190612baa9190613cd6565b91509150612b52828261203f565b60ff811660031415612c175760008085858560ff16818110612bea57634e487b7160e01b600052603260045260246000fd5b9050602002810190612bfc919061451a565b810190612c099190613efa565b91509150612b528282612503565b60ff811660041415612c765760008085858560ff16818110612c4957634e487b7160e01b600052603260045260246000fd5b9050602002810190612c5b919061451a565b810190612c689190613cd6565b91509150612b5282826106d1565b60ff811660051415612cd757600084848460ff16818110612ca757634e487b7160e01b600052603260045260246000fd5b9050602002810190612cb9919061451a565b810190612cc69190613eca565b9050612cd1816116b0565b5061305f565b60ff811660061415612ddd57600080600086868660ff16818110612d0b57634e487b7160e01b600052603260045260246000fd5b9050602002810190612d1d919061451a565b810190612d2a9190613c96565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630284c3f5843385856040518563ffffffff1660e01b8152600401612d829493929190614031565b602060405180830381600087803b158015612d9c57600080fd5b505af1158015612db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd49190613ee2565b5050505061305f565b60ff811660071415612e8857600080600086868660ff16818110612e1157634e487b7160e01b600052603260045260246000fd5b9050602002810190612e23919061451a565b810190612e309190613c96565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b620b81843385856040518563ffffffff1660e01b8152600401612d829493929190614031565b60ff811660081415612f6d57600080600086868660ff16818110612ebc57634e487b7160e01b600052603260045260246000fd5b9050602002810190612ece919061451a565b810190612edb9190613c96565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc843385856040518563ffffffff1660e01b8152600401612f339493929190614031565b600060405180830381600087803b158015612f4d57600080fd5b505af1158015612f61573d6000803e3d6000fd5b5050505050505061305f565b60ff81166009141561305f5760008060008060008089898960ff16818110612fa557634e487b7160e01b600052603260045260246000fd5b9050602002810190612fb7919061451a565b810190612fc49190613c25565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f21c1b48787878787876040518763ffffffff1660e01b815260040161302696959493929190613f75565b600060405180830381600087803b15801561304057600080fd5b505af1158015613054573d6000803e3d6000fd5b505050505050505050505b508061306a81614773565b915050612aac565b5050505050565b600c54604051633de222bb60e21b815260009182916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926130d39291909116903090600401614017565b60206040518083038186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190613ee2565b9050801561114957600c54604051635299493b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692635299493b926131809291909116908590600401613fd2565b60206040518083038186803b15801561319857600080fd5b505afa1580156131ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d09190613ee2565b91505061114c565b60095481565b600954600090611cac670de0b6b3a7640000846146df565b600b546001600160a01b031633146132205760405162461bcd60e51b81526004016106f79061434b565b60016012600083600181111561324657634e487b7160e01b600052602160045260246000fd5b600181111561326557634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020805460ff19169115159190911790557feee4857a800dd0d59a522983fa5935c3d0e584b1b60f3552c4941706e6af58ed81600181111561106c57634e487b7160e01b600052602160045260246000fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6010546001600160a01b031681565b600f546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611ee3908590600401613f61565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b60008061335f8484613981565b905061336a81613a13565b949350505050565b60008061335f8484613a2b565b600060128260ff16106133b357613397601283614715565b6133a290600a61460e565b6133ac90846145a8565b9050612020565b6133be826012614715565b6133c990600a61460e565b6133ac90846146df565b600c54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca9261342b921690869060019060040161405b565b60206040518083038186803b15801561344357600080fd5b505afa158015613457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347b9190613ee2565b600c54604051633c6340f360e21b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926134d4921690889030908790600401614031565b600060405180830381600087803b1580156134ee57600080fd5b505af1158015613502573d6000803e3d6000fd5b5050601054604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac91506135389088908790600401613fd2565b600060405180830381600087803b15801561355257600080fd5b505af1158015611c88573d6000803e3d6000fd5b600f546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613597908790600401613f61565b60206040518083038186803b1580156135af57600080fd5b505afa1580156135c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e79190613ee2565b9050808211156135f5578091505b600f54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906136279087908690600401613fd2565b600060405180830381600087803b15801561364157600080fd5b505af1158015613655573d6000803e3d6000fd5b5050600d54604051633c6340f360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063f18d03cc93506136af921690309088908890600401614031565b600060405180830381600087803b1580156136c957600080fd5b505af11580156136dd573d6000803e3d6000fd5b5050600d546040516001600160a01b038881169450909116915030907fcea6068021f706074af611c2a4b6b08820c5b8223a80149684c64c60ce7be3cc9061226890879089906144bf565b303b1590565b815161374c5760405162461bcd60e51b81526004016106f79061419b565b60008260200151116137705760405162461bcd60e51b81526004016106f79061447e565b60008260400151116137945760405162461bcd60e51b81526004016106f7906140d1565b60008260800151116137b85760405162461bcd60e51b81526004016106f790614285565b60608201516001600160a01b03166137e25760405162461bcd60e51b81526004016106f790614163565b60a08201516001600160a01b031661380c5760405162461bcd60e51b81526004016106f79061412a565b806001600160a01b031682606001516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561385357600080fd5b505afa158015613867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388b9190613c09565b6001600160a01b0316146138b15760405162461bcd60e51b81526004016106f7906143f4565b806001600160a01b03168260a001516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138f857600080fd5b505afa15801561390c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139309190613c09565b6001600160a01b0316146139565760405162461bcd60e51b81526004016106f790614146565b5050565b600060128260ff1610613972576133be601283614715565b613397826012614715565b4390565b613989613b06565b82516000906139999084906146df565b6040805160208101909152908152949350505050565b6000806139bc8585613981565b9050826139c882613a13565b611e5d9190614590565b6139da613b06565b60006139ee670de0b6b3a7640000856146df565b905060006139fc84836145a8565b604080516020810190915290815295945050505050565b80516000906106c990670de0b6b3a7640000906145a8565b613a33613b06565b6000613a4784670de0b6b3a76400006146df565b905061336a8184600001516139d2565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054613a9290614738565b90600052602060002090601f016020900481019282613ab45760008555613afa565b82601f10613acd57805160ff1916838001178555613afa565b82800160010185558215613afa579182015b82811115613afa578251825591602001919060010190613adf565b506129b9929150613b19565b6040518060200160405280600081525090565b5b808211156129b95760008155600101613b1a565b80356106cc816147bf565b60008083601f840112613b4a578182fd5b50813567ffffffffffffffff811115613b61578182fd5b6020830191508360208083028501011115613b7b57600080fd5b9250929050565b600082601f830112613b92578081fd5b813567ffffffffffffffff811115613bac57613bac6147a9565b613bbf601f8201601f191660200161455f565b818152846020838601011115613bd3578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613bfe578081fd5b8135611e7d816147bf565b600060208284031215613c1a578081fd5b8151611e7d816147bf565b60008060008060008060c08789031215613c3d578182fd5b8635613c48816147bf565b95506020870135613c58816147bf565b945060408701358015158114613c6c578283fd5b93506060870135613c7c816147d7565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215613caa578283fd5b8335613cb5816147bf565b92506020840135613cc5816147bf565b929592945050506040919091013590565b60008060408385031215613ce8578182fd5b8235613cf3816147bf565b946020939093013593505050565b60008060008060408587031215613d16578182fd5b843567ffffffffffffffff80821115613d2d578384fd5b613d3988838901613b39565b90965094506020870135915080821115613d51578384fd5b50613d5e87828801613b39565b95989497509550505050565b600060208284031215613d7b578081fd5b813560028110611e7d578182fd5b600080600080600080600080888a036101a0811215613da6578687fd5b893567ffffffffffffffff80821115613dbd578889fd5b613dc98d838e01613b82565b9a5060208c0135915080821115613dde578889fd5b50613deb8c828d01613b82565b98505060408a0135613dfc816147bf565b965060608a0135613e0c816147bf565b955060c0607f1982011215613e1f578283fd5b50608089019350613e336101408a01613b2e565b9250613e426101608a01613b2e565b9150613e516101808a01613b2e565b90509295985092959890939650565b600060c08284031215613e71578081fd5b613e7b60c061455f565b8235815260208301356020820152604083013560408201526060830135613ea1816147bf565b60608201526080838101359082015260a0830135613ebe816147bf565b60a08201529392505050565b600060208284031215613edb578081fd5b5035919050565b600060208284031215613ef3578081fd5b5051919050565b60008060408385031215613f0c578182fd5b823591506020830135613f1e816147bf565b809150509250929050565b600060208284031215613f3a578081fd5b8135611e7d816147d7565b600060208284031215613f56578081fd5b8151611e7d816147d7565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b6000602080835283518082850152825b818110156140aa5785810183015185820160400152820161408e565b818111156140bb5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600190820152604360f81b604082015260600190565b60208082526006908201526514105554d15160d21b604082015260600190565b6020808252600490820152634956574360e01b604082015260600190565b60208082526002908201526124a160f11b604082015260600190565b60208082526003908201526249565760e81b604082015260600190565b6020808252600190820152602160f91b604082015260600190565b60208082526003908201526224a22160e91b604082015260600190565b6020808252600190820152604560f81b604082015260600190565b60208082526012908201527f4e4f545f4c49515549444154455f53454c460000000000000000000000000000604082015260600190565b60208082526004908201526324ab24a960e11b604082015260600190565b60208082526003908201526204956560ec1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252600190820152601360fa1b604082015260600190565b60208082526003908201526224a72b60e91b604082015260600190565b6020808252600e908201527f4d4f52455f5448414e5f4f574544000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f494e565f444542545f4f574e4552000000000000000000000000000000000000604082015260600190565b602080825260069082015265494e565f544f60d01b604082015260600190565b6020808252600390820152624f5f4760e81b604082015260600190565b60208082526004908201526324a7262360e11b604082015260600190565b6020808252600f908201527f455843454544535f414c4c4f5745440000000000000000000000000000000000604082015260600190565b6020808252601b908201527f424f52524f57494e475f4d4f52455f5448414e5f414c4c4f5745440000000000604082015260600190565b602080825260029082015261495760f01b604082015260600190565b6020808252600f908201527f494e565f42454e45464943494152590000000000000000000000000000000000604082015260600190565b60208082526012908201527f4e4f545f454e4f5547485f42414c414e43450000000000000000000000000000604082015260600190565b6020808252600190820152602360f91b604082015260600190565b60208082526003908201526249414360e81b604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60ff929092168252602082015260400190565b6000808335601e19843603018112614530578283fd5b83018035915067ffffffffffffffff82111561454a578283fd5b602001915036819003821315613b7b57600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614588576145886147a9565b604052919050565b600082198211156145a3576145a3614793565b500190565b6000826145c357634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116145da5750614605565b8187048211156145ec576145ec614793565b808616156145f957918102915b9490941c9380026145cb565b94509492505050565b600061201d60001960ff85168460008261462a57506001611e7d565b8161463757506000611e7d565b816001811461464d576002811461465757614684565b6001915050611e7d565b60ff84111561466857614668614793565b6001841b91508482111561467e5761467e614793565b50611e7d565b5060208310610133831016604e8410600b84101617156146b7575081810a838111156146b2576146b2614793565b611e7d565b6146c484848460016145c8565b8086048211156146d6576146d6614793565b02949350505050565b60008160001904831182151516156146f9576146f9614793565b500290565b60008282101561471057614710614793565b500390565b600060ff821660ff84168082101561472f5761472f614793565b90039392505050565b60028104600182168061474c57607f821691505b6020821081141561476d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff81141561478a5761478a614793565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146147d457600080fd5b50565b60ff811681146147d457600080fdfea2646970667358221220f3142891fd55d964db1d5d85037f5fd2db1a2e56194be19b6e4889184796f1a264736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106103365760003560e01c80637c3a00fd116101b2578063bd6d894d116100f9578063ed6072f6116100a2578063f8d898981161007c578063f8d89898146105fd578063f919b4bf14610605578063fbfa77cf14610618578063ffa1ad741461062057610336565b8063ed6072f6146105cf578063edf07f15146105e2578063f1ab8f70146105f557610336565b8063dcec3124116100d3578063dcec3124146105ac578063dd5a612c146105bf578063df011c41146105c757610336565b8063bd6d894d1461057e578063cc9da5d614610586578063da4f7fb21461059957610336565b8063a5d5db0c1161015b578063aa5af0fd11610135578063aa5af0fd1461055b578063aabaecd614610563578063acb708151461056b57610336565b8063a5d5db0c14610538578063a5f688ee1461054b578063a6afed951461055357610336565b80638f840ddd1161018c5780638f840ddd1461052057806395d89b4114610528578063a36a36301461053057610336565b80637c3a00fd146104fd5780637dc0d1d01461050557806388c342ea1461050d57610336565b806347bd37181161028157806362f256e71161022a5780637746efab116102045780637746efab146104b15780637820f63b146104c45780637af70ba6146104d75780637c17d237146104ea57610336565b806362f256e71461047857806364cc85f11461048b5780636f427d821461049e57610336565b80635e318e071161025b5780635e318e071461043f5780636112fe2e1461045257806362546c401461046557610336565b806347bd37181461041c5780634b3fd14814610424578063588785401461043757610336565b80632bca5f35116102e3578063360e303a116102bd578063360e303a1461040457806338d52e0f1461040c5780633bfc7be81461041457610336565b80632bca5f35146103be5780632f865568146103de578063301c7e5d146103f157610336565b806323b9db031161031457806323b9db031461038e57806324a3d622146103a157806324d873f7146103b657610336565b806306fdde031461033b57806317bfdfbc146103595780631e9a695014610379575b600080fd5b610343610628565b604051610350919061407e565b60405180910390f35b61036c610367366004613bed565b6106b6565b60405161035091906144b6565b61038c610387366004613cd6565b6106d1565b005b61038c61039c366004613cd6565b610a0f565b6103a9610c96565b6040516103509190613f61565b61036c610ca5565b6103d16103cc366004613d6a565b610cc9565b604051610350919061400c565b61038c6103ec366004613bed565b610cde565b61038c6103ff366004613d6a565b610f9d565b6103a9611086565b6103a9611095565b61036c6110a4565b61036c61114f565b61038c610432366004613efa565b6111a8565b6103a9611572565b61038c61044d366004613eca565b611581565b61038c610460366004613eca565b6116b0565b61038c610473366004613d89565b611819565b61036c610486366004613eca565b611c93565b61036c610499366004613bed565b611cb6565b61036c6104ac366004613bed565b611cc8565b61036c6104bf366004613bed565b611d94565b61036c6104d2366004613bed565b611e66565b61036c6104e5366004613bed565b611e84565b61036c6104f8366004613bed565b611f33565b6103a9611f3f565b6103a9611f4e565b61036c61051b366004613cd6565b611f72565b61036c612026565b61034361202c565b61036c612039565b61038c610546366004613cd6565b61203f565b61036c612276565b61038c6122c9565b61036c6124ee565b6103a96124f4565b61038c610579366004613efa565b612503565b61036c612834565b61036c610594366004613bed565b6129bd565b61036c6105a7366004613eca565b612a71565b61038c6105ba366004613d01565b612a8a565b61036c613079565b61036c6131d8565b61036c6105dd366004613eca565b6131de565b61038c6105f0366004613d6a565b6131f6565b6103a96132c5565b6103a96132e9565b61036c610613366004613bed565b6132f8565b6103a9613329565b61036c61334d565b6001805461063590614738565b80601f016020809104026020016040519081016040528092919081815260200182805461066190614738565b80156106ae5780601f10610683576101008083540402835291602001916106ae565b820191906000526020600020905b81548152906001019060200180831161069157829003601f168201915b505050505081565b60006106c06122c9565b6106c982611d94565b90505b919050565b6001600160a01b0382166107005760405162461bcd60e51b81526004016106f79061432b565b60405180910390fd5b610708613a57565b600e546040516370a0823160e01b81526001600160a01b03909116906370a0823190610738903390600401613f61565b60206040518083038186803b15801561075057600080fd5b505afa158015610764573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107889190613ee2565b6040820152610795612834565b81526040805160208101825282518152908201516107b39190613352565b6060820152816107cc57606081015160808201526107d4565b608081018290525b6107f4816080015160405180602001604052808460000151815250613372565b60208201526080810151600c54604051633de222bb60e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926108539291909116903090600401614017565b60206040518083038186803b15801561086b57600080fd5b505afa15801561087f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108a39190613ee2565b10156108c15760405162461bcd60e51b81526004016106f790614447565b600e546020820151604051632770a7eb60e21b81526001600160a01b0390921691639dc29fac916108f791339190600401613fd2565b600060405180830381600087803b15801561091157600080fd5b505af1158015610925573d6000803e3d6000fd5b5050600c546080840151604051633c6340f360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116955063f18d03cc94506109839316913091899190600401614031565b600060405180830381600087803b15801561099d57600080fd5b505af11580156109b1573d6000803e3d6000fd5b5050600c54608084015160208501516040513395506001600160a01b03909316935030927f18fd144d7dbcbaa6f00fd47a84adc7dc3cc64a326ffa2dc7691a25e3837dba0392610a02928a92613feb565b60405180910390a4505050565b600080805260126020527f7e7fa33969761a458e04f477e039a608702b4f924981d6653935a8319a08ad7b5460ff1615610a5b5760405162461bcd60e51b81526004016106f7906140ec565b6001600160a01b038316610a815760405162461bcd60e51b81526004016106f79061417e565b600c54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92610ad89216908790869060040161405b565b60206040518083038186803b158015610af057600080fd5b505afa158015610b04573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b289190613ee2565b90506000610b34612834565b90506000610b5083604051806020016040528085815250613372565b600c54604051633c6340f360e21b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92610ba9921690339030908990600401614031565b600060405180830381600087803b158015610bc357600080fd5b505af1158015610bd7573d6000803e3d6000fd5b5050600e546040516340c10f1960e01b81526001600160a01b0390911692506340c10f199150610c0d9089908590600401613fd2565b600060405180830381600087803b158015610c2757600080fd5b505af1158015610c3b573d6000803e3d6000fd5b5050600c546040516001600160a01b038a81169450909116915030907fa856e8f098813135735b4d4f52d96083d1dbb35fd5603ff424661413f59c281090610c869033908990613fd2565b60405180910390a4505050505050565b600b546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60126020526000908152604090205460ff1681565b336001600160a01b0382161415610d075760405162461bcd60e51b81526004016106f7906141b6565b600c54604051630226614760e01b81526000916001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692630226614792610d5a921690600401613f61565b602060405180830381600087803b158015610d7457600080fd5b505af1158015610d88573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610dac9190613ee2565b90506000610db8612276565b90506000610dc5846106b6565b9050600083610de383600360149054906101000a900460ff1661337f565b610ded91906146df565b9050600083610e10610dfe88611f33565b600354600160a81b900460ff1661337f565b610e1a91906146df565b9050818111610f95576000610e2e84611c93565b90506000670de0b6b3a7640000610e657f0000000000000000000000000000000000000000000000000000000000000000846146df565b610e6f91906145a8565b9050610e86883387610e818582614590565b6133d3565b6001600160a01b038816600090815260116020526040812055600854610ead908290614590565b6008556000610ebc8387614590565b610ec690896146df565b90506000610ed488836145a8565b600d54604051636d289ce560e11b81529192506000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca92610f32929190911690869060019060040161405b565b60206040518083038186803b158015610f4a57600080fd5b505afa158015610f5e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f829190613ee2565b9050610f8f8b3383613566565b50505050505b505050505050565b600b546001600160a01b03163314610fc75760405162461bcd60e51b81526004016106f79061434b565b600060126000836001811115610fed57634e487b7160e01b600052602160045260246000fd5b600181111561100c57634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020805460ff19169115159190911790557fdfa820e666ed1059467a5c9faba2d85f0cb8a9bf8b871537a12766ff5f20107f81600181111561106c57634e487b7160e01b600052602160045260246000fd5b4260405161107b929190614507565b60405180910390a150565b600f546001600160a01b031681565b600c546001600160a01b031681565b600c54604051630226614760e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926302266147926110f7921690600401613f61565b602060405180830381600087803b15801561111157600080fd5b505af1158015611125573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111499190613ee2565b90505b90565b601054604080516318160ddd60e01b815290516000926001600160a01b0316916318160ddd916004808301926020929190829003018186803b15801561119457600080fd5b505afa158015611125573d6000803e3d6000fd5b6001600081905260126020527f71a67924699a20698523213e55fe499d539379d7769cd5567e2c45d583f815a35460ff16156111f65760405162461bcd60e51b81526004016106f7906140ec565b6001600160a01b03821661121c5760405162461bcd60e51b81526004016106f7906142f4565b600354600c54600160a01b90910460ff16906001600160a01b03166000611242856106b6565b905060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302266147846040518263ffffffff1660e01b81526004016112929190613f61565b602060405180830381600087803b1580156112ac57600080fd5b505af11580156112c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e49190613ee2565b90506000816112f3848761337f565b6112fd91906146df565b90506000611309612276565b611315610dfe8a611f33565b61131f91906146df565b9050600061132d83836146fe565b905060008461133c8c8a61337f565b61134691906146df565b9050808210156113685760405162461bcd60e51b81526004016106f7906143bd565b60007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663da5139ca898e60006040518463ffffffff1660e01b81526004016113bb9392919061405b565b60206040518083038186803b1580156113d357600080fd5b505afa1580156113e7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061140b9190613ee2565b9050601060009054906101000a90046001600160a01b03166001600160a01b031663c6c3bbe68c338f6040518463ffffffff1660e01b815260040161145293929190613fae565b600060405180830381600087803b15801561146c57600080fd5b505af1158015611480573d6000803e3d6000fd5b50506007546001600160a01b03808f1660009081526011602052604090819020929092559051633c6340f360e21b81527f0000000000000000000000000000000000000000000000000000000000000000909116925063f18d03cc91506114f1908b90309033908790600401614031565b600060405180830381600087803b15801561150b57600080fd5b505af115801561151f573d6000803e3d6000fd5b50505050336001600160a01b03167fcbc04eca7e9da35cb1393a6135a199ca52e450d5e9251cbd99f7847d33a367508d60405161155c91906144b6565b60405180910390a2505050505050505050505050565b600e546001600160a01b031681565b8060085410156115a35760405162461bcd60e51b81526004016106f790614447565b806008546115b191906146fe565b600855600c54604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261162d92919091169030907f0000000000000000000000000000000000000000000000000000000000000000908790600401614031565b600060405180830381600087803b15801561164757600080fd5b505af115801561165b573d6000803e3d6000fd5b505050507f0529afc4538720fe0b3eadc40486369ab962002d72fead1387b300c66073e7bf7f00000000000000000000000000000000000000000000000000000000000000008260405161107b929190613fd2565b6000806116bc33611cc8565b9050826116cb578091506116cf565b8291505b818110156116ef5760405162461bcd60e51b81526004016106f790614386565b600f54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906117219033908690600401613fd2565b600060405180830381600087803b15801561173b57600080fd5b505af115801561174f573d6000803e3d6000fd5b5050600d54604051633c6340f360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063f18d03cc93506117a9921690309033908890600401614031565b600060405180830381600087803b1580156117c357600080fd5b505af11580156117d7573d6000803e3d6000fd5b505050507fa8e76b822fc682be77f3b1c822ea81f6bda5aed92ba82e6873bfd889f328d1d2338360405161180c929190613fd2565b60405180910390a1505050565b600054610100900460ff16806118325750611832613728565b80611840575060005460ff16155b61185c5760405162461bcd60e51b81526004016106f790614228565b600054610100900460ff16158015611887576000805460ff1961ff0019909116610100171660011790555b6001600160a01b038716158015906118a757506001600160a01b03861615155b6118c35760405162461bcd60e51b81526004016106f790614499565b6001600160a01b0382166118e95760405162461bcd60e51b81526004016106f79061420b565b306001600160a01b0316846001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561192c57600080fd5b505afa158015611940573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119649190613c09565b6001600160a01b03161461198a5760405162461bcd60e51b81526004016106f79061410c565b6001600160a01b0383166119b05760405162461bcd60e51b81526004016106f7906141ed565b60008560800135116119d45760405162461bcd60e51b81526004016106f790614368565b6119ed306119e736889003880188613e60565b9061372e565b8851611a009060019060208c0190613a86565b508751611a149060029060208b0190613a86565b50600b80546001600160a01b038085166001600160a01b031992831617909255600c80548a8416908316179055600d80548984169083161790556003805492861692909116919091179055670de0b6b3a7640000600755843560045560208501356005556040850135600955608085018035600a55611a969060608701613bed565b600e80546001600160a01b0319166001600160a01b0392909216919091179055611ac660c0860160a08701613bed565b601080546001600160a01b03199081166001600160a01b0393841617909155600f8054909116868316179055600c546040805163313ce56760e01b81529051919092169163313ce567916004808301926020929190829003018186803b158015611b2f57600080fd5b505afa158015611b43573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b679190613f45565b600360146101000a81548160ff021916908360ff160217905550600d60009054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b815260040160206040518083038186803b158015611bcf57600080fd5b505afa158015611be3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c079190613f45565b600360156101000a81548160ff021916908360ff160217905550856001600160a01b0316876001600160a01b0316306001600160a01b03167f3514319b7a526ad5f1f42edf0c1df25fa0ea2ae054779987fbe636f164515e2f85604051611c6e9190613f61565b60405180910390a48015611c88576000805461ff00191690555b505050505050505050565b6000670de0b6b3a7640000600a5483611cac91906146df565b6106c991906145a8565b60116020526000908152604090205481565b600354600090600160a81b900460ff1681611cf7611ce5856106b6565b600354600160a01b900460ff1661337f565b90506000611d03612276565b600c54909150600090611d1f906001600160a01b031684611f72565b9050600082611d36611d3089611e84565b8761337f565b611d4091906146df565b90506000611d4d83612a71565b905080821015611d6657600096505050505050506106cc565b6000611d7b611d7583856146fe565b8861395a565b9050611d8785826145a8565b9998505050505050505050565b6010546040516316707ceb60e11b8152600091829182916001600160a01b031690632ce0f9d690611dc9908790600401613f61565b60206040518083038186803b158015611de157600080fd5b505afa158015611df5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e199190613ee2565b905080611e2b576000925050506106cc565b6001600160a01b038416600090815260116020526040902054600754611e5190836146df565b9250611e5d81846145a8565b95945050505050565b600080611e72836129bd565b9050611e7d816131de565b9392505050565b600d546000906001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811691635299493b9116611ec6856132f8565b6040518363ffffffff1660e01b8152600401611ee3929190613fd2565b60206040518083038186803b158015611efb57600080fd5b505afa158015611f0f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c99190613ee2565b600080611e7283611e84565b6003546001600160a01b031681565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03166302266147856040518263ffffffff1660e01b8152600401611fc19190613f61565b602060405180830381600087803b158015611fdb57600080fd5b505af1158015611fef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120139190613ee2565b61201d91906146df565b90505b92915050565b60085481565b6002805461063590614738565b600a5481565b600080805260126020527f7e7fa33969761a458e04f477e039a608702b4f924981d6653935a8319a08ad7b5460ff161561208b5760405162461bcd60e51b81526004016106f7906140ec565b600d54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca926120e29216908790869060040161405b565b60206040518083038186803b1580156120fa57600080fd5b505afa15801561210e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121329190613ee2565b600d54604051633c6340f360e21b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc9261218b921690339030908790600401614031565b600060405180830381600087803b1580156121a557600080fd5b505af11580156121b9573d6000803e3d6000fd5b5050600f546040516340c10f1960e01b81526001600160a01b0390911692506340c10f1991506121ef9087908590600401613fd2565b600060405180830381600087803b15801561220957600080fd5b505af115801561221d573d6000803e3d6000fd5b5050600d546040516001600160a01b038881169450909116915030907fa856e8f098813135735b4d4f52d96083d1dbb35fd5603ff424661413f59c2810906122689033908790613fd2565b60405180910390a450505050565b600d54604051630226614760e01b81526000916001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116926302266147926110f7921690600401613f61565b60006122d361397d565b6006549091508082141561231f577fe307fb74a265b8255fabc1154131917ce875f96118a807f88eda1e751722538d8260405161231091906144b6565b60405180910390a150506124ec565b6000612329613079565b9050600061233561114f565b6008546007546003546040516315f2405360e01b8152939450919290916000916001600160a01b03909116906315f2405390612379908890889088906004016144d6565b60206040518083038186803b15801561239157600080fd5b505afa1580156123a5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c99190613ee2565b905060006123d787896146fe565b90506123e1613b06565b60008060006123fe60405180602001604052808881525086613981565b935061240a848a613352565b92506124276040518060200160405280600554815250848a6139af565b91506124348488896139af565b60068d9055600781905560105460405163146fac4560e01b81529192506001600160a01b03169063146fac459061246f9086906004016144b6565b600060405180830381600087803b15801561248957600080fd5b505af115801561249d573d6000803e3d6000fd5b50505060088390555060065460075430917eaf397b333f747e35288f4f28a97dff5288f74200f7a94532e63e7bc9c2786d916124d9878e614590565b60085460405161155c94939291906144ec565b565b60075481565b600d546001600160a01b031681565b6001600160a01b0381166125295760405162461bcd60e51b81526004016106f790614410565b6000612534826106b6565b9050808311156125565760405162461bcd60e51b81526004016106f7906142bd565b600083612564575080612567565b50825b600c54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca926125bf921690869060019060040161405b565b60206040518083038186803b1580156125d757600080fd5b505afa1580156125eb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061260f9190613ee2565b600c54604051633de222bb60e21b815291925082916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926126699291909116903390600401614017565b60206040518083038186803b15801561268157600080fd5b505afa158015612695573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b99190613ee2565b10156126d75760405162461bcd60e51b81526004016106f790614447565b600c54604051633c6340f360e21b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc92612730929190911690339030908790600401614031565b600060405180830381600087803b15801561274a57600080fd5b505af115801561275e573d6000803e3d6000fd5b50506007546001600160a01b0380881660009081526011602052604090819020929092556010549151632770a7eb60e21b815291169250639dc29fac91506127ac9087908690600401613fd2565b600060405180830381600087803b1580156127c657600080fd5b505af11580156127da573d6000803e3d6000fd5b5050600c546040516001600160a01b038881169450909116915030907f15e061f85ae0cc955acf34c814a39567895400d498e2e52faa1fbe370bbe46f2906128259033908890613fd2565b60405180910390a45050505050565b600061283e6122c9565b600c54600e54604080516318160ddd60e01b815290516000936001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811694635299493b94928216939116916318160ddd916004808301926020929190829003018186803b1580156128b557600080fd5b505afa1580156128c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128ed9190613ee2565b6040518363ffffffff1660e01b815260040161290a929190613fd2565b60206040518083038186803b15801561292257600080fd5b505afa158015612936573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061295a9190613ee2565b90508061296b57505060045461114c565b6000612975613079565b90506000612981613b06565b60085461298c61114f565b6129969085614590565b6129a091906146fe565b91506129ac82856139d2565b51945061114c9350505050565b5090565b600d546000906106c9906001600160a01b03908116907f000000000000000000000000000000000000000000000000000000000000000016635299493b82612a04876132f8565b6040518363ffffffff1660e01b8152600401612a21929190613fd2565b60206040518083038186803b158015612a3957600080fd5b505afa158015612a4d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061051b9190613ee2565b6000670de0b6b3a764000060095483611cac91906146df565b828114612aa95760405162461bcd60e51b81526004016106f7906142a0565b60005b60ff811684111561307257600085858360ff16818110612adc57634e487b7160e01b600052603260045260246000fd5b9050602002016020810190612af19190613f29565b905060ff811660021415612b595760008085858560ff16818110612b2557634e487b7160e01b600052603260045260246000fd5b9050602002810190612b37919061451a565b810190612b449190613cd6565b91509150612b528282610a0f565b505061305f565b60ff811660011415612bb85760008085858560ff16818110612b8b57634e487b7160e01b600052603260045260246000fd5b9050602002810190612b9d919061451a565b810190612baa9190613cd6565b91509150612b52828261203f565b60ff811660031415612c175760008085858560ff16818110612bea57634e487b7160e01b600052603260045260246000fd5b9050602002810190612bfc919061451a565b810190612c099190613efa565b91509150612b528282612503565b60ff811660041415612c765760008085858560ff16818110612c4957634e487b7160e01b600052603260045260246000fd5b9050602002810190612c5b919061451a565b810190612c689190613cd6565b91509150612b5282826106d1565b60ff811660051415612cd757600084848460ff16818110612ca757634e487b7160e01b600052603260045260246000fd5b9050602002810190612cb9919061451a565b810190612cc69190613eca565b9050612cd1816116b0565b5061305f565b60ff811660061415612ddd57600080600086868660ff16818110612d0b57634e487b7160e01b600052603260045260246000fd5b9050602002810190612d1d919061451a565b810190612d2a9190613c96565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630284c3f5843385856040518563ffffffff1660e01b8152600401612d829493929190614031565b602060405180830381600087803b158015612d9c57600080fd5b505af1158015612db0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd49190613ee2565b5050505061305f565b60ff811660071415612e8857600080600086868660ff16818110612e1157634e487b7160e01b600052603260045260246000fd5b9050602002810190612e23919061451a565b810190612e309190613c96565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316630b620b81843385856040518563ffffffff1660e01b8152600401612d829493929190614031565b60ff811660081415612f6d57600080600086868660ff16818110612ebc57634e487b7160e01b600052603260045260246000fd5b9050602002810190612ece919061451a565b810190612edb9190613c96565b9250925092507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663f18d03cc843385856040518563ffffffff1660e01b8152600401612f339493929190614031565b600060405180830381600087803b158015612f4d57600080fd5b505af1158015612f61573d6000803e3d6000fd5b5050505050505061305f565b60ff81166009141561305f5760008060008060008089898960ff16818110612fa557634e487b7160e01b600052603260045260246000fd5b9050602002810190612fb7919061451a565b810190612fc49190613c25565b9550955095509550955095507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633f21c1b48787878787876040518763ffffffff1660e01b815260040161302696959493929190613f75565b600060405180830381600087803b15801561304057600080fd5b505af1158015613054573d6000803e3d6000fd5b505050505050505050505b508061306a81614773565b915050612aac565b5050505050565b600c54604051633de222bb60e21b815260009182916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f7888aec926130d39291909116903090600401614017565b60206040518083038186803b1580156130eb57600080fd5b505afa1580156130ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131239190613ee2565b9050801561114957600c54604051635299493b60e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811692635299493b926131809291909116908590600401613fd2565b60206040518083038186803b15801561319857600080fd5b505afa1580156131ac573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131d09190613ee2565b91505061114c565b60095481565b600954600090611cac670de0b6b3a7640000846146df565b600b546001600160a01b031633146132205760405162461bcd60e51b81526004016106f79061434b565b60016012600083600181111561324657634e487b7160e01b600052602160045260246000fd5b600181111561326557634e487b7160e01b600052602160045260246000fd5b81526020810191909152604001600020805460ff19169115159190911790557feee4857a800dd0d59a522983fa5935c3d0e584b1b60f3552c4941706e6af58ed81600181111561106c57634e487b7160e01b600052602160045260246000fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b6010546001600160a01b031681565b600f546040516370a0823160e01b81526000916001600160a01b0316906370a0823190611ee3908590600401613f61565b7f000000000000000000000000000000000000000000000000000000000000000081565b600181565b60008061335f8484613981565b905061336a81613a13565b949350505050565b60008061335f8484613a2b565b600060128260ff16106133b357613397601283614715565b6133a290600a61460e565b6133ac90846145a8565b9050612020565b6133be826012614715565b6133c990600a61460e565b6133ac90846146df565b600c54604051636d289ce560e11b81526000916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263da5139ca9261342b921690869060019060040161405b565b60206040518083038186803b15801561344357600080fd5b505afa158015613457573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061347b9190613ee2565b600c54604051633c6340f360e21b81529192506001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081169263f18d03cc926134d4921690889030908790600401614031565b600060405180830381600087803b1580156134ee57600080fd5b505af1158015613502573d6000803e3d6000fd5b5050601054604051632770a7eb60e21b81526001600160a01b039091169250639dc29fac91506135389088908790600401613fd2565b600060405180830381600087803b15801561355257600080fd5b505af1158015611c88573d6000803e3d6000fd5b600f546040516370a0823160e01b81526000916001600160a01b0316906370a0823190613597908790600401613f61565b60206040518083038186803b1580156135af57600080fd5b505afa1580156135c3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e79190613ee2565b9050808211156135f5578091505b600f54604051632770a7eb60e21b81526001600160a01b0390911690639dc29fac906136279087908690600401613fd2565b600060405180830381600087803b15801561364157600080fd5b505af1158015613655573d6000803e3d6000fd5b5050600d54604051633c6340f360e21b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000008116945063f18d03cc93506136af921690309088908890600401614031565b600060405180830381600087803b1580156136c957600080fd5b505af11580156136dd573d6000803e3d6000fd5b5050600d546040516001600160a01b038881169450909116915030907fcea6068021f706074af611c2a4b6b08820c5b8223a80149684c64c60ce7be3cc9061226890879089906144bf565b303b1590565b815161374c5760405162461bcd60e51b81526004016106f79061419b565b60008260200151116137705760405162461bcd60e51b81526004016106f79061447e565b60008260400151116137945760405162461bcd60e51b81526004016106f7906140d1565b60008260800151116137b85760405162461bcd60e51b81526004016106f790614285565b60608201516001600160a01b03166137e25760405162461bcd60e51b81526004016106f790614163565b60a08201516001600160a01b031661380c5760405162461bcd60e51b81526004016106f79061412a565b806001600160a01b031682606001516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b15801561385357600080fd5b505afa158015613867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061388b9190613c09565b6001600160a01b0316146138b15760405162461bcd60e51b81526004016106f7906143f4565b806001600160a01b03168260a001516001600160a01b0316638da5cb5b6040518163ffffffff1660e01b815260040160206040518083038186803b1580156138f857600080fd5b505afa15801561390c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139309190613c09565b6001600160a01b0316146139565760405162461bcd60e51b81526004016106f790614146565b5050565b600060128260ff1610613972576133be601283614715565b613397826012614715565b4390565b613989613b06565b82516000906139999084906146df565b6040805160208101909152908152949350505050565b6000806139bc8585613981565b9050826139c882613a13565b611e5d9190614590565b6139da613b06565b60006139ee670de0b6b3a7640000856146df565b905060006139fc84836145a8565b604080516020810190915290815295945050505050565b80516000906106c990670de0b6b3a7640000906145a8565b613a33613b06565b6000613a4784670de0b6b3a76400006146df565b905061336a8184600001516139d2565b6040518060a0016040528060008152602001600081526020016000815260200160008152602001600081525090565b828054613a9290614738565b90600052602060002090601f016020900481019282613ab45760008555613afa565b82601f10613acd57805160ff1916838001178555613afa565b82800160010185558215613afa579182015b82811115613afa578251825591602001919060010190613adf565b506129b9929150613b19565b6040518060200160405280600081525090565b5b808211156129b95760008155600101613b1a565b80356106cc816147bf565b60008083601f840112613b4a578182fd5b50813567ffffffffffffffff811115613b61578182fd5b6020830191508360208083028501011115613b7b57600080fd5b9250929050565b600082601f830112613b92578081fd5b813567ffffffffffffffff811115613bac57613bac6147a9565b613bbf601f8201601f191660200161455f565b818152846020838601011115613bd3578283fd5b816020850160208301379081016020019190915292915050565b600060208284031215613bfe578081fd5b8135611e7d816147bf565b600060208284031215613c1a578081fd5b8151611e7d816147bf565b60008060008060008060c08789031215613c3d578182fd5b8635613c48816147bf565b95506020870135613c58816147bf565b945060408701358015158114613c6c578283fd5b93506060870135613c7c816147d7565b9598949750929560808101359460a0909101359350915050565b600080600060608486031215613caa578283fd5b8335613cb5816147bf565b92506020840135613cc5816147bf565b929592945050506040919091013590565b60008060408385031215613ce8578182fd5b8235613cf3816147bf565b946020939093013593505050565b60008060008060408587031215613d16578182fd5b843567ffffffffffffffff80821115613d2d578384fd5b613d3988838901613b39565b90965094506020870135915080821115613d51578384fd5b50613d5e87828801613b39565b95989497509550505050565b600060208284031215613d7b578081fd5b813560028110611e7d578182fd5b600080600080600080600080888a036101a0811215613da6578687fd5b893567ffffffffffffffff80821115613dbd578889fd5b613dc98d838e01613b82565b9a5060208c0135915080821115613dde578889fd5b50613deb8c828d01613b82565b98505060408a0135613dfc816147bf565b965060608a0135613e0c816147bf565b955060c0607f1982011215613e1f578283fd5b50608089019350613e336101408a01613b2e565b9250613e426101608a01613b2e565b9150613e516101808a01613b2e565b90509295985092959890939650565b600060c08284031215613e71578081fd5b613e7b60c061455f565b8235815260208301356020820152604083013560408201526060830135613ea1816147bf565b60608201526080838101359082015260a0830135613ebe816147bf565b60a08201529392505050565b600060208284031215613edb578081fd5b5035919050565b600060208284031215613ef3578081fd5b5051919050565b60008060408385031215613f0c578182fd5b823591506020830135613f1e816147bf565b809150509250929050565b600060208284031215613f3a578081fd5b8135611e7d816147d7565b600060208284031215613f56578081fd5b8151611e7d816147d7565b6001600160a01b0391909116815260200190565b6001600160a01b039687168152949095166020850152911515604084015260ff166060830152608082015260a081019190915260c00190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b6001600160a01b039390931683526020830191909152604082015260600190565b901515815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b0393909316835260208301919091521515604082015260600190565b6000602080835283518082850152825b818110156140aa5785810183015185820160400152820161408e565b818111156140bb5783604083870101525b50601f01601f1916929092016040019392505050565b6020808252600190820152604360f81b604082015260600190565b60208082526006908201526514105554d15160d21b604082015260600190565b6020808252600490820152634956574360e01b604082015260600190565b60208082526002908201526124a160f11b604082015260600190565b60208082526003908201526249565760e81b604082015260600190565b6020808252600190820152602160f91b604082015260600190565b60208082526003908201526224a22160e91b604082015260600190565b6020808252600190820152604560f81b604082015260600190565b60208082526012908201527f4e4f545f4c49515549444154455f53454c460000000000000000000000000000604082015260600190565b60208082526004908201526324ab24a960e11b604082015260600190565b60208082526003908201526204956560ec1b604082015260600190565b6020808252602e908201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160408201527f647920696e697469616c697a6564000000000000000000000000000000000000606082015260800190565b6020808252600190820152601360fa1b604082015260600190565b60208082526003908201526224a72b60e91b604082015260600190565b6020808252600e908201527f4d4f52455f5448414e5f4f574544000000000000000000000000000000000000604082015260600190565b6020808252600e908201527f494e565f444542545f4f574e4552000000000000000000000000000000000000604082015260600190565b602080825260069082015265494e565f544f60d01b604082015260600190565b6020808252600390820152624f5f4760e81b604082015260600190565b60208082526004908201526324a7262360e11b604082015260600190565b6020808252600f908201527f455843454544535f414c4c4f5745440000000000000000000000000000000000604082015260600190565b6020808252601b908201527f424f52524f57494e475f4d4f52455f5448414e5f414c4c4f5745440000000000604082015260600190565b602080825260029082015261495760f01b604082015260600190565b6020808252600f908201527f494e565f42454e45464943494152590000000000000000000000000000000000604082015260600190565b60208082526012908201527f4e4f545f454e4f5547485f42414c414e43450000000000000000000000000000604082015260600190565b6020808252600190820152602360f91b604082015260600190565b60208082526003908201526249414360e81b604082015260600190565b90815260200190565b9182526001600160a01b0316602082015260400190565b9283526020830191909152604082015260600190565b93845260208401929092526040830152606082015260800190565b60ff929092168252602082015260400190565b6000808335601e19843603018112614530578283fd5b83018035915067ffffffffffffffff82111561454a578283fd5b602001915036819003821315613b7b57600080fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715614588576145886147a9565b604052919050565b600082198211156145a3576145a3614793565b500190565b6000826145c357634e487b7160e01b81526012600452602481fd5b500490565b80825b60018086116145da5750614605565b8187048211156145ec576145ec614793565b808616156145f957918102915b9490941c9380026145cb565b94509492505050565b600061201d60001960ff85168460008261462a57506001611e7d565b8161463757506000611e7d565b816001811461464d576002811461465757614684565b6001915050611e7d565b60ff84111561466857614668614793565b6001841b91508482111561467e5761467e614793565b50611e7d565b5060208310610133831016604e8410600b84101617156146b7575081810a838111156146b2576146b2614793565b611e7d565b6146c484848460016145c8565b8086048211156146d6576146d6614793565b02949350505050565b60008160001904831182151516156146f9576146f9614793565b500290565b60008282101561471057614710614793565b500390565b600060ff821660ff84168082101561472f5761472f614793565b90039392505050565b60028104600182168061474c57607f821691505b6020821081141561476d57634e487b7160e01b600052602260045260246000fd5b50919050565b600060ff821660ff81141561478a5761478a614793565b60010192915050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160a01b03811681146147d457600080fd5b50565b60ff811681146147d457600080fdfea2646970667358221220f3142891fd55d964db1d5d85037f5fd2db1a2e56194be19b6e4889184796f1a264736f6c63430008010033",
  "devdoc": {
    "author": "@samparsky",
    "kind": "dev",
    "methods": {
      "accrueInterest()": {
        "details": "This calculates interest accrued from the last checkpointed block up to the current block and writes new checkpoint to storage."
      },
      "borrow(uint256,address)": {
        "details": "we use normalized amounts to calculate the",
        "params": {
          "_amountToBorrow": "is the amount of the borrow asset vault shares the user wants to borrow",
          "_debtOwner": "this should be the msg.sender or address that delegates credit to the msg.sender"
        }
      },
      "borrowBalanceCurrent(address)": {
        "params": {
          "_account": "The address whose balance should be calculated after updating borrowIndex"
        },
        "returns": {
          "_0": "The calculated balance*"
        }
      },
      "calcBorrowLimit(uint256)": {
        "params": {
          "_collateralValueInUSD": "is the USD value of the users collateral"
        }
      },
      "calcCollateralRequired(uint256)": {
        "params": {
          "_borrowAmount": "is the input borrow amount"
        }
      },
      "calculateLiquidationFee(uint256)": {
        "params": {
          "_amount": "is a uint representing the full amount earned as interest"
        }
      },
      "collateralOfAccount(address)": {
        "params": {
          "_account": "is the address of the account being looked up"
        }
      },
      "depositBorrowAsset(address,uint256)": {
        "details": "the user should initially have deposited in the vault transfer appropriate amount of underlying from msg.sender to the LendingPair",
        "params": {
          "_amount": "is the amount of underlying borrow asset being deposited",
          "_tokenReceipeint": "whom to credit the wrapped tokens"
        }
      },
      "depositCollateral(address,uint256)": {
        "params": {
          "_amount": "is the amount of underlying collateral asset being deposited",
          "_tokenRecipient": "address to credit the wrapped collateral shares"
        }
      },
      "exchangeRateCurrent()": {
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "getBorrowLimit(address)": {
        "details": "this calculation uses current values for calculations",
        "params": {
          "_account": "is the input account address"
        }
      },
      "getBorrowLimitInUSD(address)": {
        "details": "this calculation uses current values for calculations",
        "params": {
          "_account": "is the input account address"
        }
      },
      "getMaxWithdrawAllowed(address)": {
        "details": "this function runs calculations to accrue interest for an up to date amount",
        "params": {
          "_account": "is the account being checked"
        }
      },
      "getPriceOfBorrowAsset()": {
        "details": "returns price of collateral in usd"
      },
      "getPriceOfCollateral()": {
        "details": "returns price of collateral in usd"
      },
      "getPriceOfToken(address,uint256)": {
        "params": {
          "_amount": "this is the amount of tokens",
          "_token": "this is the price of the token"
        }
      },
      "getTotalAvailableCollateralValue(address)": {
        "details": "this function runs calculations to accrue interest for an up to date amount",
        "params": {
          "_account": "is the address whos collateral is being retreived"
        }
      },
      "getTotalAvailableCollateralValueInUSD(address)": {
        "details": "this function runs calculations to accrue interest for an up to date amount",
        "params": {
          "_account": "is the address whos collateral is being retreived"
        }
      },
      "initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)": {
        "params": {
          "_asset": "borrow asset  ",
          "_collateralAsset": "pair collateral",
          "_name": "for lending pair",
          "_pauseGuardian": "pause guardian address",
          "_symbol": "for lending pair",
          "_wrappedCollateralAsset": "wrapped token minted when depositing collateral asset"
        }
      },
      "pause(uint8)": {
        "details": "pause actions in the lending pair"
      },
      "redeem(address,uint256)": {
        "params": {
          "_amount": "of wrapper token to redeem",
          "_to": "Address to send the underlying tokens to"
        }
      },
      "repay(uint256,address)": {
        "params": {
          "_beneficiary": "address to repay loan position",
          "_repayAmount": "The amount of borrow asset to repay represented in underlying"
        }
      },
      "unpause(uint8)": {
        "details": "unpause actions in lending pair"
      },
      "withdrawFees(uint256)": {
        "details": "this function can be called by anyone",
        "params": {
          "_toWithdraw": "is the amount of a reservers being withdrawn"
        }
      }
    },
    "stateVariables": {
      "PRECISION": {
        "details": "liquidation fee precision"
      },
      "VERSION": {
        "details": "version"
      },
      "_borrowAssetUnderlyingDecimal": {
        "details": "borrow asset underlying decimal"
      },
      "_collateralAssetUnderlyingDecimal": {
        "details": "collateral asset underlying decimal"
      },
      "accrualBlockNumber": {
        "details": "Block number that interest was last accrued at"
      },
      "borrowIndex": {
        "details": "Accumulator of the total earned interest rate since the opening of the market"
      },
      "collateralFactor": {
        "details": "The amount of collateral required for a borrow position in 1e18"
      },
      "initialExchangeRateMantissa": {
        "details": "initialExchangeRateMantissa Initial exchange rate used when minting"
      },
      "name": {
        "details": "lending pair name"
      },
      "reserveFactorMantissa": {
        "details": "Fraction of interest currently set aside for reserves"
      },
      "symbol": {
        "details": "lending pair symbol"
      }
    },
    "title": "LendingPair",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Deposit(address,address,address,address,uint256)": {
        "notice": "Emitted on deposit"
      },
      "Liquidate(address,address,address,uint256,address)": {
        "notice": "Emitted on liquidation"
      },
      "Redeem(address,address,address,address,uint256,uint256)": {
        "notice": "Emitted on Redeem"
      },
      "Repay(address,address,address,address,uint256)": {
        "notice": "Emitted on repay"
      }
    },
    "kind": "user",
    "methods": {
      "accountInterestIndex(address)": {
        "notice": "Mapping of account addresses to their interest interest index"
      },
      "accrueInterest()": {
        "notice": "Applies accrued interest to total borrows and reserves"
      },
      "asset()": {
        "notice": "The pair borrow asset"
      },
      "borrowBalanceCurrent(address)": {
        "notice": "Accrue interest to updated borrowIndex and then calculate account's borrow balance  using the updated borrowIndex"
      },
      "calcBorrowLimit(uint256)": {
        "notice": "calcBorrowLimit is used to calculate the borrow limit for an account  based on the input value of their collateral"
      },
      "calcCollateralRequired(uint256)": {
        "notice": "calcCollateralRequired returns the amount of collateral needed for an input borrow value"
      },
      "calculateLiquidationFee(uint256)": {
        "notice": "calculateFee is used to calculate the fee earned"
      },
      "collateralAsset()": {
        "notice": "The pair collateral asset"
      },
      "collateralOfAccount(address)": {
        "notice": "collateralOfAccount is a view function to retreive an accounts collateral"
      },
      "debtToken()": {
        "notice": "The wrapper token for debt"
      },
      "depositCollateral(address,uint256)": {
        "notice": "deposit allows a user to deposit underlying collateral from vault"
      },
      "exchangeRateCurrent()": {
        "notice": "Accrue interest then return the up-to-date exchange rate"
      },
      "feeWithdrawalAddr()": {
        "notice": "The address to withdraw fees to"
      },
      "getBorrowLimit(address)": {
        "notice": "getBorrowLimit returns the borrow limit for an account"
      },
      "getBorrowLimitInUSD(address)": {
        "notice": "getBorrowLimit returns the borrow limit for an account"
      },
      "getCashPrior()": {
        "notice": "getCashPrior is a view funcion that returns the balance of all held borrow asset"
      },
      "getMaxWithdrawAllowed(address)": {
        "notice": "Figures out how much of a given collateral an account is allowed to withdraw"
      },
      "getPriceOfToken(address,uint256)": {
        "notice": "getPriceOfToken returns price of token in usd"
      },
      "getTotalAvailableCollateralValue(address)": {
        "notice": "getTotalAvailableCollateralValue returns the total availible collaeral value for an account"
      },
      "getTotalAvailableCollateralValueInUSD(address)": {
        "notice": "getTotalAvailableCollateralValueInUSD returns the total availible collaeral value for an account in USD"
      },
      "initialize(string,string,address,address,(uint256,uint256,uint256,address,uint256,address),address,address,address)": {
        "notice": "Initialize function"
      },
      "interestRate()": {
        "notice": "The interest rate model for the borrow asset"
      },
      "liquidationFee()": {
        "notice": "liquidation fee in 1e18"
      },
      "oracle()": {
        "notice": "The price oracle for the assets"
      },
      "pauseGuardian()": {
        "notice": "the address that can pause borrow & deposits of assets"
      },
      "pauseStatus(uint8)": {
        "notice": "Mapping of action to pause status"
      },
      "protocolLiquidationFeeShare()": {
        "notice": "protocol liquidation fee percent in 1e18"
      },
      "redeem(address,uint256)": {
        "notice": "Allows a user to redeem their Wrapper Token for the appropriate amount of underlying asset"
      },
      "repay(uint256,address)": {
        "notice": "Sender repays their own borrow"
      },
      "totalBorrows()": {
        "notice": "Total amount of outstanding borrows of the asset in this market"
      },
      "totalReserves()": {
        "notice": "Total amount of reserves of the underlying held in this market"
      },
      "vault()": {
        "notice": "where the tokens are stored"
      },
      "withdrawFees(uint256)": {
        "notice": "withdrawFees to the feeWithdrawalAddr"
      },
      "wrappedCollateralAsset()": {
        "notice": "The wrapper token for the collateral asset"
      },
      "wrapperBorrowedAsset()": {
        "notice": "The wrapper token for the borrow asset"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 12898,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 12901,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2771,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2774,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 2789,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "interestRate",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(IInterestRateModel)9054"
      },
      {
        "astId": 2800,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "_borrowAssetUnderlyingDecimal",
        "offset": 20,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 2803,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "_collateralAssetUnderlyingDecimal",
        "offset": 21,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 2806,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "initialExchangeRateMantissa",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 2809,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "reserveFactorMantissa",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 2812,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "6",
        "type": "t_uint256"
      },
      {
        "astId": 2816,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2820,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "totalReserves",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 2823,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "collateralFactor",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 2826,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "liquidationFee",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2833,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "pauseGuardian",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 2838,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "asset",
        "offset": 0,
        "slot": "12",
        "type": "t_contract(IERC20)849"
      },
      {
        "astId": 2843,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "collateralAsset",
        "offset": 0,
        "slot": "13",
        "type": "t_contract(IERC20)849"
      },
      {
        "astId": 2848,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "wrapperBorrowedAsset",
        "offset": 0,
        "slot": "14",
        "type": "t_contract(IBSWrapperToken)8915"
      },
      {
        "astId": 2853,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "wrappedCollateralAsset",
        "offset": 0,
        "slot": "15",
        "type": "t_contract(IBSWrapperToken)8915"
      },
      {
        "astId": 2858,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "debtToken",
        "offset": 0,
        "slot": "16",
        "type": "t_contract(IDebtToken)8969"
      },
      {
        "astId": 2864,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "accountInterestIndex",
        "offset": 0,
        "slot": "17",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2870,
        "contract": "contracts/LendingPair.sol:LendingPair",
        "label": "pauseStatus",
        "offset": 0,
        "slot": "18",
        "type": "t_mapping(t_enum(Actions)2768,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IBSWrapperToken)8915": {
        "encoding": "inplace",
        "label": "contract IBSWrapperToken",
        "numberOfBytes": "20"
      },
      "t_contract(IDebtToken)8969": {
        "encoding": "inplace",
        "label": "contract IDebtToken",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)849": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IInterestRateModel)9054": {
        "encoding": "inplace",
        "label": "contract IInterestRateModel",
        "numberOfBytes": "20"
      },
      "t_enum(Actions)2768": {
        "encoding": "inplace",
        "label": "enum LendingPair.Actions",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_enum(Actions)2768,t_bool)": {
        "encoding": "mapping",
        "key": "t_enum(Actions)2768",
        "label": "mapping(enum LendingPair.Actions => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}