{
  "address": "0x6068100B56323551d2F98B91b9c3c6E9c0532360",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_admin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "uuid",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "name": "CodeUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract IOracle",
          "name": "oracle",
          "type": "address"
        }
      ],
      "name": "UpdateOracle",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "name": "assetToOracle",
      "outputs": [
        {
          "internalType": "contract IOracle",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCodeAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "codeAddress",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "getPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "updateCode",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "contract IOracle",
          "name": "_oracle",
          "type": "address"
        }
      ],
      "name": "updateOracleForAsset",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "viewPriceInUSD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "args": [
    "0x90F706114CCA699A59196414a14644446A580D96"
  ],
  "solcInputHash": "93ebaa441e3462400e4372fabffe5451",
  "metadata": "{\"compiler\":{\"version\":\"0.8.1+commit.df193b15\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_admin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"uuid\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"name\":\"CodeUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract IOracle\",\"name\":\"oracle\",\"type\":\"address\"}],\"name\":\"UpdateOracle\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"assetToOracle\",\"outputs\":[{\"internalType\":\"contract IOracle\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCodeAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"codeAddress\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"getPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"updateCode\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"contract IOracle\",\"name\":\"_oracle\",\"type\":\"address\"}],\"name\":\"updateOracleForAsset\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"viewPriceInUSD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"@samparsky\",\"kind\":\"dev\",\"methods\":{\"getCodeAddress()\":{\"details\":\"Get current implementation code address.\"},\"getPriceInUSD(address)\":{\"params\":{\"_token\":\"token to fetch price\"}},\"proxiableUUID()\":{\"details\":\"Proxiable UUID marker function.      This would help to avoid wrong logic contract to be used for upgrading.\"},\"updateOracleForAsset(address,address)\":{\"params\":{\"_asset\":\"the oracle for the asset\",\"_oracle\":\"the oracle address\"}},\"viewPriceInUSD(address)\":{\"params\":{\"_token\":\"view price of token\"}}},\"stateVariables\":{\"admin\":{\"details\":\"admin allowed to update price oracle\"}},\"title\":\"PriceOracleAggregator\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"assetToOracle(address)\":{\"notice\":\"token to the oracle address\"},\"getPriceInUSD(address)\":{\"notice\":\"returns price of token in USD in 1e8 decimals\"},\"updateOracleForAsset(address,address)\":{\"notice\":\"adds oracle for an asset e.g. ETH\"},\"viewPriceInUSD(address)\":{\"notice\":\"returns price of token in USD\"}},\"notice\":\"aggregator of price oracle for assets in LendingPairs\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/PriceOracleAggregator.sol\":\"PriceOracleAggregator\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":500},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n// solhint-disable-next-line compiler-version\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {UpgradeableProxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n */\\nabstract contract Initializable {\\n\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        require(_initializing || !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9abb3184c06afb50807598533c4c0943dd864080d310ac28cbb5b2cfae6a18b1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0xf8e8d118a7a8b2e134181f7da655f6266aa3a0f9134b2605747139fcb0c5d835\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x069b2631bb5b5193a58ccf7a06266c7361bd2c20095667af4402817605627f45\",\"license\":\"MIT\"},\"contracts/interfaces/IOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\ninterface IOracle {\\n    /// @notice Price update event\\n    /// @param asset the asset\\n    /// @param newPrice price of the asset\\n    event PriceUpdated(address asset, uint256 newPrice);\\n\\n    function getPriceInUSD() external returns (uint256);\\n\\n    function viewPriceInUSD() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfcdda6b34ad69e268e203fcb5e32035bcc2607838bc9f051a2a6730f4093acd7\",\"license\":\"MIT\"},\"contracts/interfaces/IPriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"./IOracle.sol\\\";\\n\\ninterface IPriceOracleAggregator {\\n    event UpdateOracle(IERC20 token, IOracle oracle);\\n\\n    function getPriceInUSD(IERC20 _token) external returns (uint256);\\n\\n    function updateOracleForAsset(IERC20 _asset, IOracle _oracle) external;\\n\\n    function viewPriceInUSD(IERC20 _token) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd3873b940be31bb8345d206af22a0b8cea9addaf46517398d9890735e2024cea\",\"license\":\"MIT\"},\"contracts/oracle/PriceOracleAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {UUPSProxiable} from \\\"../upgradability/UUPSProxiable.sol\\\";\\nimport \\\"../interfaces/IPriceOracleAggregator.sol\\\";\\nimport \\\"../interfaces/IOracle.sol\\\";\\n\\n////////////////////////////////////////////////////////////////////////////////////////////\\n/// @title PriceOracleAggregator\\n/// @author @samparsky\\n/// @notice aggregator of price oracle for assets in LendingPairs\\n////////////////////////////////////////////////////////////////////////////////////////////\\n\\ncontract PriceOracleAggregator is UUPSProxiable, IPriceOracleAggregator {\\n    /// @dev admin allowed to update price oracle\\n    address public immutable admin;\\n\\n    /// @notice token to the oracle address\\n    mapping(IERC20 => IOracle) public assetToOracle;\\n\\n    modifier onlyAdmin() {\\n        require(msg.sender == admin, \\\"ONLY_ADMIN\\\");\\n        _;\\n    }\\n\\n    constructor(address _admin) {\\n        require(_admin != address(0), \\\"INVALID_ADMIN\\\");\\n        admin = _admin;\\n    }\\n\\n    /// @notice adds oracle for an asset e.g. ETH\\n    /// @param _asset the oracle for the asset\\n    /// @param _oracle the oracle address\\n    function updateOracleForAsset(IERC20 _asset, IOracle _oracle) external override onlyAdmin {\\n        require(address(_asset) != address(0), \\\"INVALID_ASSET\\\");\\n        require(address(_oracle) != address(0), \\\"INVALID_ORACLE\\\");\\n        assetToOracle[_asset] = _oracle;\\n        emit UpdateOracle(_asset, _oracle);\\n    }\\n\\n    /// @notice returns price of token in USD in 1e8 decimals\\n    /// @param _token token to fetch price\\n    function getPriceInUSD(IERC20 _token) external override returns (uint256) {\\n        require(address(assetToOracle[_token]) != address(0), \\\"INVALID_ORACLE\\\");\\n        return assetToOracle[_token].getPriceInUSD();\\n    }\\n\\n    /// @notice returns price of token in USD\\n    /// @param _token view price of token\\n    function viewPriceInUSD(IERC20 _token) external view override returns (uint256) {\\n        require(address(assetToOracle[_token]) != address(0), \\\"INVALID_ORACLE\\\");\\n        return assetToOracle[_token].viewPriceInUSD();\\n    }\\n\\n    function proxiableUUID() public pure override returns (bytes32) {\\n        return keccak256(\\\"org.warp.contracts.warpvault.priceoralceaggregator\\\");\\n    }\\n\\n    function updateCode(address newAddress) external override onlyAdmin {\\n        _updateCodeAddress(newAddress);\\n    }\\n}\\n\",\"keccak256\":\"0xd9b0500db1703cb571d8959cca1ad06bad380a8c941fff3182a70474555c8bd3\",\"license\":\"MIT\"},\"contracts/upgradability/UUPSProxiable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\nimport {UUPSUtils} from \\\"./UUPSUtils.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev UUPS (Universal Upgradeable Proxy Standard) Proxiable contract.\\n */\\nabstract contract UUPSProxiable is Initializable {\\n    /**\\n     * @dev Get current implementation code address.\\n     */\\n    function getCodeAddress() public view returns (address codeAddress) {\\n        return UUPSUtils.implementation();\\n    }\\n\\n    function updateCode(address newAddress) external virtual;\\n\\n    /**\\n     * @dev Proxiable UUID marker function.\\n     *      This would help to avoid wrong logic contract to be used for upgrading.\\n     */\\n    function proxiableUUID() public view virtual returns (bytes32);\\n\\n    /**\\n     * @dev Update code address function.\\n     *      It is internal, so the derived contract could setup its own permission logic.\\n     */\\n    function _updateCodeAddress(address newAddress) internal {\\n        require(UUPSUtils.implementation() != address(0), \\\"UUPSProxiable: not upgradable\\\");\\n        require(\\n            proxiableUUID() == UUPSProxiable(newAddress).proxiableUUID(),\\n            \\\"UUPSProxiable: not compatible logic\\\"\\n        );\\n        UUPSUtils.setImplementation(newAddress);\\n        emit CodeUpdated(proxiableUUID(), newAddress);\\n    }\\n\\n    event CodeUpdated(bytes32 uuid, address codeAddress);\\n}\\n\",\"keccak256\":\"0xd569c1730923697f98cd3d4d74d21749d14ff6bea8b763fcb98343a17a43f535\",\"license\":\"MIT\"},\"contracts/upgradability/UUPSUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.1;\\n\\n/**\\n * @title UUPS (Universal Upgradeable Proxy Standard) Shared Library\\n */\\nlibrary UUPSUtils {\\n    /**\\n     * @dev Implementation slot constant.\\n     * Using https://eips.ethereum.org/EIPS/eip-1967 standard\\n     * Storage slot 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc\\n     * (obtained as bytes32(uint256(keccak256('eip1967.proxy.implementation')) - 1)).\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT =\\n        0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /// @dev Get implementation address.\\n    function implementation() internal view returns (address impl) {\\n        assembly {\\n            // solium-disable-line\\n            impl := sload(_IMPLEMENTATION_SLOT)\\n        }\\n    }\\n\\n    /// @dev Set new implementation address.\\n    function setImplementation(address codeAddress) internal {\\n        assembly {\\n            // solium-disable-line\\n            sstore(_IMPLEMENTATION_SLOT, codeAddress)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x125441f574989269c1e471e61085d33d064903e006f8b29e81eba2b79e2be1da\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516108c43803806108c483398101604081905261002f91610073565b6001600160a01b03811661005e5760405162461bcd60e51b8152600401610055906100a1565b60405180910390fd5b60601b6001600160601b0319166080526100c8565b600060208284031215610084578081fd5b81516001600160a01b038116811461009a578182fd5b9392505050565b6020808252600d908201526c24a72b20a624a22fa0a226a4a760991b604082015260600190565b60805160601c6107d06100f460003960008181610220015281816102a7015261044a01526107d06000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806352d1902d1161005b57806352d1902d146100f35780635df52114146100fb578063eb9d14a91461010e578063f851a4401461012157610088565b8063022661471461008d5780632e00d245146100b657806346951954146100d657806350d75d25146100eb575b600080fd5b6100a061009b3660046105c8565b610129565b6040516100ad919061064f565b60405180910390f35b6100c96100c43660046105c8565b6101fa565b6040516100ad919061063b565b6100e96100e43660046105c8565b610215565b005b6100c9610269565b6100a0610278565b6100e9610109366004610603565b61029c565b6100a061011c3660046105c8565b6103aa565b6100c9610448565b6001600160a01b0381811660009081526001602052604081205490911661016b5760405162461bcd60e51b815260040161016290610717565b60405180910390fd5b6001600160a01b0380831660009081526001602090815260408083205481516370d5301b60e11b8152915194169363e1aa603693600480840194938390030190829087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f491906105eb565b92915050565b6001602052600090815260409020546001600160a01b031681565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461025d5760405162461bcd60e51b8152600401610162906106cc565b6102668161046c565b50565b600061027361057f565b905090565b7f9059eaa97076fc8fbc19feea426633aeb7a2617add27106a2b81c655a26d222890565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102e45760405162461bcd60e51b8152600401610162906106cc565b6001600160a01b03821661030a5760405162461bcd60e51b8152600401610162906106f0565b6001600160a01b0381166103305760405162461bcd60e51b815260040161016290610717565b6001600160a01b0382811660009081526001602052604090819020805473ffffffffffffffffffffffffffffffffffffffff191692841692909217909155517fb1d1442dba579887e297ac433e5716c847abf2dc052ee9de4869b7b1b8f6206d9061039e908490849061066f565b60405180910390a15050565b6001600160a01b038181166000908152600160205260408120549091166103e35760405162461bcd60e51b815260040161016290610717565b6001600160a01b0380831660009081526001602090815260409182902054825163f55fa17f60e01b8152925193169263f55fa17f926004808201939291829003018186803b15801561043457600080fd5b505afa1580156101d0573d6000803e3d6000fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600061047661057f565b6001600160a01b0316141561049d5760405162461bcd60e51b81526004016101629061074e565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d657600080fd5b505afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e91906105eb565b610516610278565b146105335760405162461bcd60e51b815260040161016290610689565b61053c816105a4565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc610565610278565b82604051610574929190610658565b60405180910390a150565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b6000602082840312156105d9578081fd5b81356105e481610785565b9392505050565b6000602082840312156105fc578081fd5b5051919050565b60008060408385031215610615578081fd5b823561062081610785565b9150602083013561063081610785565b809150509250929050565b6001600160a01b0391909116815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160a01b0392831681529116602082015260400190565b60208082526023908201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60408201526267696360e81b606082015260800190565b6020808252600a908201526927a7262cafa0a226a4a760b11b604082015260600190565b6020808252600d908201526c1253959053125117d054d4d155609a1b604082015260600190565b6020808252600e908201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f5555505350726f786961626c653a206e6f742075706772616461626c65000000604082015260600190565b6001600160a01b038116811461026657600080fdfea26469706673582212207c2648b0513fdf134355e7d75d1cc83ee7ba6d25a0c61a9a0798c70a8b59203e64736f6c63430008010033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c806352d1902d1161005b57806352d1902d146100f35780635df52114146100fb578063eb9d14a91461010e578063f851a4401461012157610088565b8063022661471461008d5780632e00d245146100b657806346951954146100d657806350d75d25146100eb575b600080fd5b6100a061009b3660046105c8565b610129565b6040516100ad919061064f565b60405180910390f35b6100c96100c43660046105c8565b6101fa565b6040516100ad919061063b565b6100e96100e43660046105c8565b610215565b005b6100c9610269565b6100a0610278565b6100e9610109366004610603565b61029c565b6100a061011c3660046105c8565b6103aa565b6100c9610448565b6001600160a01b0381811660009081526001602052604081205490911661016b5760405162461bcd60e51b815260040161016290610717565b60405180910390fd5b6001600160a01b0380831660009081526001602090815260408083205481516370d5301b60e11b8152915194169363e1aa603693600480840194938390030190829087803b1580156101bc57600080fd5b505af11580156101d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101f491906105eb565b92915050565b6001602052600090815260409020546001600160a01b031681565b336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461025d5760405162461bcd60e51b8152600401610162906106cc565b6102668161046c565b50565b600061027361057f565b905090565b7f9059eaa97076fc8fbc19feea426633aeb7a2617add27106a2b81c655a26d222890565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146102e45760405162461bcd60e51b8152600401610162906106cc565b6001600160a01b03821661030a5760405162461bcd60e51b8152600401610162906106f0565b6001600160a01b0381166103305760405162461bcd60e51b815260040161016290610717565b6001600160a01b0382811660009081526001602052604090819020805473ffffffffffffffffffffffffffffffffffffffff191692841692909217909155517fb1d1442dba579887e297ac433e5716c847abf2dc052ee9de4869b7b1b8f6206d9061039e908490849061066f565b60405180910390a15050565b6001600160a01b038181166000908152600160205260408120549091166103e35760405162461bcd60e51b815260040161016290610717565b6001600160a01b0380831660009081526001602090815260409182902054825163f55fa17f60e01b8152925193169263f55fa17f926004808201939291829003018186803b15801561043457600080fd5b505afa1580156101d0573d6000803e3d6000fd5b7f000000000000000000000000000000000000000000000000000000000000000081565b600061047661057f565b6001600160a01b0316141561049d5760405162461bcd60e51b81526004016101629061074e565b806001600160a01b03166352d1902d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156104d657600080fd5b505afa1580156104ea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061050e91906105eb565b610516610278565b146105335760405162461bcd60e51b815260040161016290610689565b61053c816105a4565b7fe011bc04c286c344a8fcbb8de77f953da762c3e25d8cdea984147fc4168a5dcc610565610278565b82604051610574929190610658565b60405180910390a150565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5490565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc55565b6000602082840312156105d9578081fd5b81356105e481610785565b9392505050565b6000602082840312156105fc578081fd5b5051919050565b60008060408385031215610615578081fd5b823561062081610785565b9150602083013561063081610785565b809150509250929050565b6001600160a01b0391909116815260200190565b90815260200190565b9182526001600160a01b0316602082015260400190565b6001600160a01b0392831681529116602082015260400190565b60208082526023908201527f5555505350726f786961626c653a206e6f7420636f6d70617469626c65206c6f60408201526267696360e81b606082015260800190565b6020808252600a908201526927a7262cafa0a226a4a760b11b604082015260600190565b6020808252600d908201526c1253959053125117d054d4d155609a1b604082015260600190565b6020808252600e908201527f494e56414c49445f4f5241434c45000000000000000000000000000000000000604082015260600190565b6020808252601d908201527f5555505350726f786961626c653a206e6f742075706772616461626c65000000604082015260600190565b6001600160a01b038116811461026657600080fdfea26469706673582212207c2648b0513fdf134355e7d75d1cc83ee7ba6d25a0c61a9a0798c70a8b59203e64736f6c63430008010033",
  "devdoc": {
    "author": "@samparsky",
    "kind": "dev",
    "methods": {
      "getCodeAddress()": {
        "details": "Get current implementation code address."
      },
      "getPriceInUSD(address)": {
        "params": {
          "_token": "token to fetch price"
        }
      },
      "proxiableUUID()": {
        "details": "Proxiable UUID marker function.      This would help to avoid wrong logic contract to be used for upgrading."
      },
      "updateOracleForAsset(address,address)": {
        "params": {
          "_asset": "the oracle for the asset",
          "_oracle": "the oracle address"
        }
      },
      "viewPriceInUSD(address)": {
        "params": {
          "_token": "view price of token"
        }
      }
    },
    "stateVariables": {
      "admin": {
        "details": "admin allowed to update price oracle"
      }
    },
    "title": "PriceOracleAggregator",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "assetToOracle(address)": {
        "notice": "token to the oracle address"
      },
      "getPriceInUSD(address)": {
        "notice": "returns price of token in USD in 1e8 decimals"
      },
      "updateOracleForAsset(address,address)": {
        "notice": "adds oracle for an asset e.g. ETH"
      },
      "viewPriceInUSD(address)": {
        "notice": "returns price of token in USD"
      }
    },
    "notice": "aggregator of price oracle for assets in LendingPairs",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/oracle/PriceOracleAggregator.sol:PriceOracleAggregator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 141,
        "contract": "contracts/oracle/PriceOracleAggregator.sol:PriceOracleAggregator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9454,
        "contract": "contracts/oracle/PriceOracleAggregator.sol:PriceOracleAggregator",
        "label": "assetToOracle",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_contract(IERC20)849,t_contract(IOracle)9074)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)849": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IOracle)9074": {
        "encoding": "inplace",
        "label": "contract IOracle",
        "numberOfBytes": "20"
      },
      "t_mapping(t_contract(IERC20)849,t_contract(IOracle)9074)": {
        "encoding": "mapping",
        "key": "t_contract(IERC20)849",
        "label": "mapping(contract IERC20 => contract IOracle)",
        "numberOfBytes": "32",
        "value": "t_contract(IOracle)9074"
      }
    }
  }
}