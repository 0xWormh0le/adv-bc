{
  "address": "0x756B6734bF88438941437152A027768De889C525",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_usdcToken",
          "type": "address"
        },
        {
          "internalType": "contract IAavePool",
          "name": "_aaveBribePool",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "proposalId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "support",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amountInBidAsset",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "usdcPlacedInBid",
          "type": "uint256"
        }
      ],
      "name": "BidWithOtherAsset",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "aaveBribePool",
      "outputs": [
        {
          "internalType": "contract IAavePool",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minUSDCToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "contract ICurvePool",
                  "name": "curvePool",
                  "type": "address"
                },
                {
                  "internalType": "int128",
                  "name": "xTokenIndex",
                  "type": "int128"
                },
                {
                  "internalType": "int128",
                  "name": "yTokenIndex",
                  "type": "int128"
                }
              ],
              "internalType": "struct AaveMIMBidHelperV1.CurvePoolConfig",
              "name": "curvePoolConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct AaveMIMBidHelperV1.Bid",
          "name": "bid",
          "type": "tuple"
        }
      ],
      "name": "curveSwapAssetBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "contract IERC20",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "minUSDCToReceive",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "proposalId",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "support",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "contract ICurvePool",
                  "name": "curvePool",
                  "type": "address"
                },
                {
                  "internalType": "int128",
                  "name": "xTokenIndex",
                  "type": "int128"
                },
                {
                  "internalType": "int128",
                  "name": "yTokenIndex",
                  "type": "int128"
                }
              ],
              "internalType": "struct AaveMIMBidHelperV1.CurvePoolConfig",
              "name": "curvePoolConfig",
              "type": "tuple"
            }
          ],
          "internalType": "struct AaveMIMBidHelperV1.Bid",
          "name": "bid",
          "type": "tuple"
        },
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "curveSwapAssetBidWithPermit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "usdcToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xd984321db78d208282301ee48c8d73224d3a52603f3f5c17e55e9b5a1c760498",
  "receipt": {
    "to": null,
    "from": "0xCb7D8A80c3D7D3ebd7fbD0Fa6b644C8a536c9269",
    "contractAddress": "0x756B6734bF88438941437152A027768De889C525",
    "transactionIndex": 304,
    "gasUsed": "701830",
    "logsBloom": "0x
    "blockHash": "0x992beead726806c79ce681a50afc0f948e783420dea5b72ac79067394695ef74",
    "transactionHash": "0xd984321db78d208282301ee48c8d73224d3a52603f3f5c17e55e9b5a1c760498",
    "logs": [],
    "blockNumber": 14081925,
    "cumulativeGasUsed": "23018269",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48",
    "0x829E97E0c94701D5cDDd101405073e0BC6FD39F1"
  ],
  "solcInputHash": "3174c0b35289423a94f4ca8a4b1cb545",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_usdcToken\",\"type\":\"address\"},{\"internalType\":\"contract IAavePool\",\"name\":\"_aaveBribePool\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountInBidAsset\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"usdcPlacedInBid\",\"type\":\"uint256\"}],\"name\":\"BidWithOtherAsset\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"aaveBribePool\",\"outputs\":[{\"internalType\":\"contract IAavePool\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUSDCToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"xTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"yTokenIndex\",\"type\":\"int128\"}],\"internalType\":\"struct AaveMIMBidHelperV1.CurvePoolConfig\",\"name\":\"curvePoolConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct AaveMIMBidHelperV1.Bid\",\"name\":\"bid\",\"type\":\"tuple\"}],\"name\":\"curveSwapAssetBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minUSDCToReceive\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"contract ICurvePool\",\"name\":\"curvePool\",\"type\":\"address\"},{\"internalType\":\"int128\",\"name\":\"xTokenIndex\",\"type\":\"int128\"},{\"internalType\":\"int128\",\"name\":\"yTokenIndex\",\"type\":\"int128\"}],\"internalType\":\"struct AaveMIMBidHelperV1.CurvePoolConfig\",\"name\":\"curvePoolConfig\",\"type\":\"tuple\"}],\"internalType\":\"struct AaveMIMBidHelperV1.Bid\",\"name\":\"bid\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"curveSwapAssetBidWithPermit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"usdcToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"_aaveBribePool\":\"Address of the Aave Bribe Pool\",\"_usdcToken\":\"Address of the USDC token\"}},\"curveSwapAssetBid((address,uint256,uint256,uint256,bool,(address,int128,int128)))\":{\"params\":{\"bid\":\"Details of the bid\"},\"returns\":{\"_0\":\"amount bid to the aave pool\"}},\"curveSwapAssetBidWithPermit((address,uint256,uint256,uint256,bool,(address,int128,int128)),address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"params\":{\"bid\":\"Details of the bid\"},\"returns\":{\"_0\":\"amount bid to the aave pool\"}}},\"version\":1},\"userdoc\":{\"events\":{\"BidWithOtherAsset(address,address,uint256,bool,uint256,uint256)\":{\"notice\":\"Event emitted when Bid is submitted from the helper contract\"}},\"kind\":\"user\",\"methods\":{\"aaveBribePool()\":{\"notice\":\"Address of the Aave Bribe Pool\"},\"constructor\":{\"notice\":\"Constructor\"},\"curveSwapAssetBid((address,uint256,uint256,uint256,bool,(address,int128,int128)))\":{\"notice\":\"Swap tokens from curve and then bid against Aave Pool\"},\"curveSwapAssetBidWithPermit((address,uint256,uint256,uint256,bool,(address,int128,int128)),address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"notice\":\"Swap tokens from curve and then bid against Aave Pool using permit function from ERC20Permit\"},\"usdcToken()\":{\"notice\":\"Address of the USDC tokens\"}},\"notice\":\"Bid Helper. Contract to Bid to aave pool using other tokens\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/helper/MIMBidHelper.sol\":\"AaveMIMBidHelperV1\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"contracts/helper/MIMBidHelper.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\n\\nimport \\\"../interfaces/IAavePool.sol\\\";\\nimport \\\"../interfaces/Curve/ICurvePool.sol\\\";\\n\\n/**\\n * @notice Bid Helper. Contract to Bid to aave pool using other tokens\\n */\\ncontract AaveMIMBidHelperV1 {\\n    using SafeERC20 for IERC20;\\n\\n    struct CurvePoolConfig {\\n        ICurvePool curvePool; // address of the curve pool\\n        int128 xTokenIndex; // i token index for the curve pool\\n        int128 yTokenIndex; // j token index for the curve pool\\n    }\\n\\n    struct Bid {\\n        IERC20 token; // token to swap from curve pool\\n        uint256 amount; // amount of tokens\\n        uint256 minUSDCToReceive; // minimum USDC to receive after swapping from the pool\\n        uint256 proposalId; // proposal to bid against\\n        bool support; // support for the proposal\\n        CurvePoolConfig curvePoolConfig; // curve pool details\\n    }\\n\\n    /**\\n     * @notice Event emitted when Bid is submitted from the helper contract\\n     */\\n    event BidWithOtherAsset(\\n        IERC20 indexed token,\\n        address indexed bidder,\\n        uint256 proposalId,\\n        bool support,\\n        uint256 amountInBidAsset,\\n        uint256 usdcPlacedInBid\\n    );\\n\\n    /**\\n     * @notice Address of the USDC tokens\\n     */\\n    IERC20 public immutable usdcToken;\\n    /**\\n     * @notice Address of the Aave Bribe Pool\\n     */\\n    IAavePool public immutable aaveBribePool;\\n\\n    /**\\n     * @notice Constructor\\n     * @param _usdcToken Address of the USDC token\\n     * @param _aaveBribePool Address of the Aave Bribe Pool\\n     */\\n    constructor(IERC20 _usdcToken, IAavePool _aaveBribePool) {\\n        usdcToken = _usdcToken;\\n        aaveBribePool = _aaveBribePool;\\n    }\\n\\n    /**\\n     * @notice Swap tokens from curve and then bid against Aave Pool\\n     * @param bid Details of the bid\\n     * @return amount bid to the aave pool\\n     */\\n    function curveSwapAssetBid(Bid calldata bid) external returns (uint256) {\\n        return\\n            _curveSwapAssetBid(\\n                bid.token,\\n                bid.amount,\\n                bid.minUSDCToReceive,\\n                bid.proposalId,\\n                bid.support,\\n                bid.curvePoolConfig\\n            );\\n    }\\n\\n    /**\\n     * @notice Swap tokens from curve and then bid against Aave Pool using permit function from ERC20Permit\\n     * @param bid Details of the bid\\n     * @return amount bid to the aave pool\\n     */\\n    function curveSwapAssetBidWithPermit(\\n        Bid calldata bid,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external returns (uint256) {\\n        IERC20Permit(address(bid.token)).permit(owner, spender, value, deadline, v, r, s);\\n        return\\n            _curveSwapAssetBid(\\n                bid.token,\\n                bid.amount,\\n                bid.minUSDCToReceive,\\n                bid.proposalId,\\n                bid.support,\\n                bid.curvePoolConfig\\n            );\\n    }\\n\\n    /**\\n     * @notice Internal functions to place the bid\\n     * @param _token address of the token to swap\\n     * @param _amount amount of tokens to swap\\n     * @param _minUSDCToReceive Minimum number of USDC to receive after swapping\\n     * @param proposalId proposal to bid\\n     * @param support Support for the proposal\\n     * @return amount bid to the aave pool\\n     */\\n    function _curveSwapAssetBid(\\n        IERC20 _token,\\n        uint256 _amount,\\n        uint256 _minUSDCToReceive,\\n        uint256 proposalId,\\n        bool support,\\n        CurvePoolConfig calldata curvePoolConfig\\n    ) internal returns (uint256) {\\n        require(_minUSDCToReceive != 0, \\\"Min USDT to receive should be non zero\\\");\\n        _token.safeTransferFrom(msg.sender, address(this), _amount);\\n        _token.safeApprove(address(curvePoolConfig.curvePool), _amount);\\n\\n        uint256 tokensReceived = curvePoolConfig.curvePool.exchange_underlying(\\n            curvePoolConfig.xTokenIndex,\\n            curvePoolConfig.yTokenIndex,\\n            _amount,\\n            _minUSDCToReceive\\n        );\\n        require(\\n            tokensReceived >= _minUSDCToReceive,\\n            \\\"amount received should be more than min usdc requested\\\"\\n        );\\n\\n        usdcToken.approve(address(aaveBribePool), tokensReceived);\\n        aaveBribePool.bid(msg.sender, proposalId, uint128(tokensReceived), support);\\n        emit BidWithOtherAsset(_token, msg.sender, proposalId, support, _amount, tokensReceived);\\n        return tokensReceived;\\n    }\\n}\\n\",\"keccak256\":\"0xc0f4f26633afc369bdf29fe473df5dea62dae827541db0cdd21d9d166a2cde2b\",\"license\":\"MIT\"},\"contracts/interfaces/Curve/ICurvePool.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface ICurvePool {\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy\\n    ) external returns (uint256);\\n\\n    function exchange_underlying(\\n        int128 i,\\n        int128 j,\\n        uint256 dx,\\n        uint256 min_dy,\\n        address _receiver\\n    ) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x73deec9d54fdae0afbc8a2b9f27e83e6a84f86f73bbbd571261d5ecbe4123d7f\",\"license\":\"Unlicense\"},\"contracts/interfaces/IAavePool.sol\":{\"content\":\"//SPDX-License-Identifier: Unlicense\\npragma solidity 0.8.4;\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IAavePool {\\n    struct AssetIndex {\\n        // tracks the last stkAave aave reward balance\\n        uint256 lastStkAaveRewardBalance;\\n        // tracks the total Aave reward for stkAave holders\\n        uint128 rewardIndex;\\n        // bribe reward index;\\n        uint128 bribeRewardIndex;\\n        // bribe reward last timestamp\\n        uint64 bribeLastRewardTimestamp;\\n        // bid id\\n        uint64 bidId;\\n        // tracks the total bid reward\\n        // share to be distributed\\n        uint128 bidIndex;\\n        // tracks the reward per share\\n        uint128 bribeRewardPerShare;\\n        // tracks the reward per share\\n        uint128 stkAaveRewardPerShare;\\n    }\\n\\n    struct BribeReward {\\n        uint128 rewardAmountDistributedPerSecond;\\n        uint64 startTimestamp;\\n        uint64 endTimestamp;\\n    }\\n\\n    struct UserInfo {\\n        // stkaave reward index\\n        uint128 stkAaveLastRewardPerShare;\\n        // bribe reward index\\n        uint128 bribeLastRewardPerShare;\\n        // reward from the bids in the bribe pool\\n        uint128 totalPendingBidReward;\\n        // tracks aave reward from the stk aave pool\\n        uint128 totalPendingStkAaveReward;\\n        // tracks bribe distributed to the user\\n        uint128 totalPendingBribeReward;\\n        // tracks the last user bid id for aave deposit\\n        uint128 aaveLastBidId;\\n        // tracks the last user bid id for stkAave deposit\\n        uint128 stkAaveLastBidId;\\n    }\\n\\n    /// @dev proposal bid info\\n    struct Bid {\\n        uint256 totalVotes;\\n        uint256 proposalStartBlock;\\n        uint128 highestBid;\\n        uint64 endTime;\\n        bool support;\\n        bool voted;\\n        address highestBidder;\\n    }\\n\\n    /// @dev emitted on deposit\\n    event Deposit(IERC20 indexed token, address indexed user, uint256 amount, uint256 timestamp);\\n\\n    /// @dev emitted on user reward accrue\\n    event AssetReward(IERC20 indexed asset, uint256 totalAmountAccrued, uint256 timestamp);\\n\\n    /// @dev emitted on user reward accrue\\n    event RewardAccrue(\\n        address indexed user,\\n        uint256 pendingBidReward,\\n        uint256 pendingStkAaveReward,\\n        uint256 pendingBribeReward,\\n        uint256 timestamp\\n    );\\n\\n    event Withdraw(IERC20 indexed token, address indexed user, uint256 amount, uint256 timestamp);\\n\\n    event RewardClaim(\\n        address indexed user,\\n        uint256 pendingBid,\\n        uint256 pendingReward,\\n        uint256 pendingBribeReward,\\n        uint256 timestamp\\n    );\\n\\n    event RewardDistributed(uint256 proposalId, uint256 amount);\\n\\n    event HighestBidIncreased(\\n        uint256 indexed proposalId,\\n        address indexed prevHighestBidder,\\n        address indexed highestBidder,\\n        address sender,\\n        uint256 highestBid,\\n        bool support\\n    );\\n\\n    event BlockProposalId(uint256 indexed proposalId, uint256 timestamp);\\n\\n    event UnblockProposalId(uint256 indexed proposalId, uint256 timestamp);\\n\\n    event UpdateDelayPeriod(uint256 delayperiod, uint256 timestamp);\\n\\n    /// @dev emitted on vote\\n    event Vote(uint256 indexed proposalId, address user, bool support, uint256 timestamp);\\n\\n    /// @dev emitted on Refund\\n    event Refund(uint256 indexed proposalId, address bidder, uint256 bidAmount);\\n\\n    /// @dev emitted on Unclaimed rewards\\n    event UnclaimedRewards(address owner, uint256 amount);\\n\\n    /// @dev emitted on setEndTimestamp\\n    event SetBribeRewardEndTimestamp(uint256 oldTimestamp, uint256 endTimestamp);\\n\\n    /// @dev emitted on setRewardPerSecond\\n    event SetBribeRewardPerSecond(uint256 oldRewardPerSecond, uint256 newRewardPerSecond);\\n\\n    /// @dev emitted on withdrawRemainingReward\\n    event WithdrawRemainingReward(uint256 amount);\\n\\n    /// @dev emmitted on setStartTimestamp\\n    event SetBribeRewardStartTimestamp(uint256 oldTimestamp, uint256 endTimestamp);\\n\\n    /// @dev emitted on setFeeRecipient\\n    event UpdateFeeRecipient(address sender, address receipient);\\n\\n    function deposit(\\n        IERC20 asset,\\n        address recipient,\\n        uint128 amount,\\n        bool claim\\n    ) external;\\n\\n    function withdraw(\\n        IERC20 asset,\\n        address recipient,\\n        uint128 amount,\\n        bool claim\\n    ) external;\\n\\n    function bid(\\n        address bidder,\\n        uint256 proposalId,\\n        uint128 amount,\\n        bool support\\n    ) external;\\n}\\n\",\"keccak256\":\"0x2c84ab6f4062c2286c8877e762a177fa3249b718a8f0a90d739fbfa93e173fd5\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051610c8d380380610c8d83398101604081905261002f9161004d565b6001600160601b0319606092831b8116608052911b1660a05261009e565b6000806040838503121561005f578182fd5b825161006a81610086565b602084015190925061007b81610086565b809150509250929050565b6001600160a01b038116811461009b57600080fd5b50565b60805160601c60a05160601c610bb16100dc60003960008181609a015281816103f901526104e1015260008181605601526104280152610bb16000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806311eac855146100515780632b76079b146100955780638fe2a494146100bc578063f6a31539146100dd575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6100cf6100ca366004610a19565b6100f0565b60405190815260200161008c565b6100cf6100eb366004610a35565b610130565b600061012a61010260208401846109dc565b60208401356040850135606086013561012160a08801608089016109a4565b8760a001610213565b92915050565b600061013f60208a018a6109dc565b60405163d505accf60e01b81526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919091169063d505accf9060e401600060405180830381600087803b1580156101b157600080fd5b505af11580156101c5573d6000803e3d6000fd5b5061020692506101db91505060208b018b6109dc565b8a602001358b604001358c606001358d60800160208101906101fd91906109a4565b8e60a001610213565b9998505050505050505050565b6000846102765760405162461bcd60e51b815260206004820152602660248201527f4d696e205553445420746f20726563656976652073686f756c64206265206e6f6044820152656e207a65726f60d01b60648201526084015b60405180910390fd5b61028b6001600160a01b0388163330896105a6565b6102ac61029b60208401846109dc565b6001600160a01b0389169088610617565b60006102bb60208401846109dc565b6001600160a01b031663a6417ed66102d960408601602087016109f8565b6102e960608701604088016109f8565b6040516001600160e01b031960e085901b168152600f92830b6004820152910b6024820152604481018a905260648101899052608401602060405180830381600087803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103719190610ac2565b9050858110156103e25760405162461bcd60e51b815260206004820152603660248201527f616d6f756e742072656365697665642073686f756c64206265206d6f726520746044820152751a185b881b5a5b881d5cd918c81c995c5d595cdd195960521b606482015260840161026d565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561046c57600080fd5b505af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a491906109c0565b506040516325a7193360e11b8152336004820152602481018690526fffffffffffffffffffffffffffffffff8216604482015284151560648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634b4e326690608401600060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b50506040805188815287151560208201529081018a9052606081018490523392506001600160a01b038b1691507ff902f3c9b07d46bbeca228762c7ddb0cafc103ea86555dcad866ceb3635612139060800160405180910390a3979650505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526106119085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610740565b50505050565b8015806106a05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561066657600080fd5b505afa15801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190610ac2565b155b61070b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161026d565b6040516001600160a01b03831660248201526044810182905261073b90849063095ea7b360e01b906064016105da565b505050565b6000610795826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108129092919063ffffffff16565b80519091501561073b57808060200190518101906107b391906109c0565b61073b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026d565b6060610821848460008561082b565b90505b9392505050565b60608247101561088c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161026d565b843b6108da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026d565b600080866001600160a01b031685876040516108f69190610ada565b60006040518083038185875af1925050503d8060008114610933576040519150601f19603f3d011682016040523d82523d6000602084013e610938565b606091505b5091509150610948828286610953565b979650505050505050565b60608315610962575081610824565b8251156109725782518084602001fd5b8160405162461bcd60e51b815260040161026d9190610af6565b6000610100828403121561099e578081fd5b50919050565b6000602082840312156109b5578081fd5b813561082481610b6d565b6000602082840312156109d1578081fd5b815161082481610b6d565b6000602082840312156109ed578081fd5b813561082481610b55565b600060208284031215610a09578081fd5b813580600f0b8114610824578182fd5b60006101008284031215610a2b578081fd5b610824838361098c565b6000806000806000806000806101e0898b031215610a51578384fd5b610a5b8a8a61098c565b9750610100890135610a6c81610b55565b9650610120890135610a7d81610b55565b95506101408901359450610160890135935061018089013560ff81168114610aa3578384fd5b979a96995094979396929592945050506101a0820135916101c0013590565b600060208284031215610ad3578081fd5b5051919050565b60008251610aec818460208701610b29565b9190910192915050565b6020815260008251806020840152610b15816040850160208701610b29565b601f01601f19169190910160400192915050565b60005b83811015610b44578181015183820152602001610b2c565b838111156106115750506000910152565b6001600160a01b0381168114610b6a57600080fd5b50565b8015158114610b6a57600080fdfea264697066735822122077d5cf72c623bb5156f4e908d132e9e3ee5087ab79af1a729a2bde3462d4f8ac64736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806311eac855146100515780632b76079b146100955780638fe2a494146100bc578063f6a31539146100dd575b600080fd5b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b0390911681526020015b60405180910390f35b6100787f000000000000000000000000000000000000000000000000000000000000000081565b6100cf6100ca366004610a19565b6100f0565b60405190815260200161008c565b6100cf6100eb366004610a35565b610130565b600061012a61010260208401846109dc565b60208401356040850135606086013561012160a08801608089016109a4565b8760a001610213565b92915050565b600061013f60208a018a6109dc565b60405163d505accf60e01b81526001600160a01b038a811660048301528981166024830152604482018990526064820188905260ff8716608483015260a4820186905260c48201859052919091169063d505accf9060e401600060405180830381600087803b1580156101b157600080fd5b505af11580156101c5573d6000803e3d6000fd5b5061020692506101db91505060208b018b6109dc565b8a602001358b604001358c606001358d60800160208101906101fd91906109a4565b8e60a001610213565b9998505050505050505050565b6000846102765760405162461bcd60e51b815260206004820152602660248201527f4d696e205553445420746f20726563656976652073686f756c64206265206e6f6044820152656e207a65726f60d01b60648201526084015b60405180910390fd5b61028b6001600160a01b0388163330896105a6565b6102ac61029b60208401846109dc565b6001600160a01b0389169088610617565b60006102bb60208401846109dc565b6001600160a01b031663a6417ed66102d960408601602087016109f8565b6102e960608701604088016109f8565b6040516001600160e01b031960e085901b168152600f92830b6004820152910b6024820152604481018a905260648101899052608401602060405180830381600087803b15801561033957600080fd5b505af115801561034d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103719190610ac2565b9050858110156103e25760405162461bcd60e51b815260206004820152603660248201527f616d6f756e742072656365697665642073686f756c64206265206d6f726520746044820152751a185b881b5a5b881d5cd918c81c995c5d595cdd195960521b606482015260840161026d565b60405163095ea7b360e01b81526001600160a01b037f000000000000000000000000000000000000000000000000000000000000000081166004830152602482018390527f0000000000000000000000000000000000000000000000000000000000000000169063095ea7b390604401602060405180830381600087803b15801561046c57600080fd5b505af1158015610480573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104a491906109c0565b506040516325a7193360e11b8152336004820152602481018690526fffffffffffffffffffffffffffffffff8216604482015284151560648201527f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031690634b4e326690608401600060405180830381600087803b15801561052d57600080fd5b505af1158015610541573d6000803e3d6000fd5b50506040805188815287151560208201529081018a9052606081018490523392506001600160a01b038b1691507ff902f3c9b07d46bbeca228762c7ddb0cafc103ea86555dcad866ceb3635612139060800160405180910390a3979650505050505050565b6040516001600160a01b03808516602483015283166044820152606481018290526106119085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152610740565b50505050565b8015806106a05750604051636eb1769f60e11b81523060048201526001600160a01b03838116602483015284169063dd62ed3e9060440160206040518083038186803b15801561066657600080fd5b505afa15801561067a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061069e9190610ac2565b155b61070b5760405162461bcd60e51b815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527520746f206e6f6e2d7a65726f20616c6c6f77616e636560501b606482015260840161026d565b6040516001600160a01b03831660248201526044810182905261073b90849063095ea7b360e01b906064016105da565b505050565b6000610795826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166108129092919063ffffffff16565b80519091501561073b57808060200190518101906107b391906109c0565b61073b5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b606482015260840161026d565b6060610821848460008561082b565b90505b9392505050565b60608247101561088c5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b606482015260840161026d565b843b6108da5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161026d565b600080866001600160a01b031685876040516108f69190610ada565b60006040518083038185875af1925050503d8060008114610933576040519150601f19603f3d011682016040523d82523d6000602084013e610938565b606091505b5091509150610948828286610953565b979650505050505050565b60608315610962575081610824565b8251156109725782518084602001fd5b8160405162461bcd60e51b815260040161026d9190610af6565b6000610100828403121561099e578081fd5b50919050565b6000602082840312156109b5578081fd5b813561082481610b6d565b6000602082840312156109d1578081fd5b815161082481610b6d565b6000602082840312156109ed578081fd5b813561082481610b55565b600060208284031215610a09578081fd5b813580600f0b8114610824578182fd5b60006101008284031215610a2b578081fd5b610824838361098c565b6000806000806000806000806101e0898b031215610a51578384fd5b610a5b8a8a61098c565b9750610100890135610a6c81610b55565b9650610120890135610a7d81610b55565b95506101408901359450610160890135935061018089013560ff81168114610aa3578384fd5b979a96995094979396929592945050506101a0820135916101c0013590565b600060208284031215610ad3578081fd5b5051919050565b60008251610aec818460208701610b29565b9190910192915050565b6020815260008251806020840152610b15816040850160208701610b29565b601f01601f19169190910160400192915050565b60005b83811015610b44578181015183820152602001610b2c565b838111156106115750506000910152565b6001600160a01b0381168114610b6a57600080fd5b50565b8015158114610b6a57600080fdfea264697066735822122077d5cf72c623bb5156f4e908d132e9e3ee5087ab79af1a729a2bde3462d4f8ac64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "_aaveBribePool": "Address of the Aave Bribe Pool",
          "_usdcToken": "Address of the USDC token"
        }
      },
      "curveSwapAssetBid((address,uint256,uint256,uint256,bool,(address,int128,int128)))": {
        "params": {
          "bid": "Details of the bid"
        },
        "returns": {
          "_0": "amount bid to the aave pool"
        }
      },
      "curveSwapAssetBidWithPermit((address,uint256,uint256,uint256,bool,(address,int128,int128)),address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "params": {
          "bid": "Details of the bid"
        },
        "returns": {
          "_0": "amount bid to the aave pool"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "BidWithOtherAsset(address,address,uint256,bool,uint256,uint256)": {
        "notice": "Event emitted when Bid is submitted from the helper contract"
      }
    },
    "kind": "user",
    "methods": {
      "aaveBribePool()": {
        "notice": "Address of the Aave Bribe Pool"
      },
      "constructor": {
        "notice": "Constructor"
      },
      "curveSwapAssetBid((address,uint256,uint256,uint256,bool,(address,int128,int128)))": {
        "notice": "Swap tokens from curve and then bid against Aave Pool"
      },
      "curveSwapAssetBidWithPermit((address,uint256,uint256,uint256,bool,(address,int128,int128)),address,address,uint256,uint256,uint8,bytes32,bytes32)": {
        "notice": "Swap tokens from curve and then bid against Aave Pool using permit function from ERC20Permit"
      },
      "usdcToken()": {
        "notice": "Address of the USDC tokens"
      }
    },
    "notice": "Bid Helper. Contract to Bid to aave pool using other tokens",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}